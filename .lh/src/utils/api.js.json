{
    "sourceFile": "src/utils/api.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1746997376375,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746997451216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -113,5 +113,21 @@\n              user_answer: answerText\n          }),\n          // No necesitas Content-Type aquí, fetch lo deduce de URLSearchParams\n      });\n+};\n+\n+export const getAuthenticatedUserFromSession = () => {\n+    const token = getAuthTokenFromStorage();\n+    const email = sessionStorage.getItem('email');\n+    const username = sessionStorage.getItem('username');\n+    \n+    if (!token || !email) {\n+        return null;\n+    }\n+    \n+    return {\n+        token,\n+        email,\n+        username: username || email\n+    };\n };\n\\ No newline at end of file\n"
                }
            ],
            "date": 1746997376375,
            "name": "Commit-0",
            "content": "// src/utils/api.js\n\n// Helper para obtener el token. Asume que AuthContext lo guarda en localStorage O sessionStorage\nconst getAuthTokenFromStorage = () => {\n    let token = localStorage.getItem('token');\n    if (!token) {\n        token = sessionStorage.getItem('access_token');\n    }\n    // console.log(\"getAuthTokenFromStorage found token:\", !!token);\n    return token;\n};\n\nconst API_BASE_URL = \"http://127.0.0.1:8003/auth/api/logic\"; // Ajusta si tu base URL cambió\n\nconst fetchAuthenticated = async (endpoint, options = {}) => {\n    const token = getAuthTokenFromStorage();\n\n    // No lanzar error aquí si no hay token, el backend lo hará (401)\n    // pero sí es bueno loguearlo para depuración.\n    if (!token) {\n        console.warn(`WorkspaceAuthenticated: No token found for endpoint: ${endpoint}. Request will likely fail.`);\n        // Dejar que la llamada falle y sea manejada por el backend y el catch general.\n    }\n\n    const headers = {\n        ...options.headers, // Permite pasar otros headers\n        // 'Content-Type' se añadirá o no dependiendo del 'body'\n    };\n    // Solo añadir Authorization si hay token\n    if (token) {\n        headers['Authorization'] = `Bearer ${token}`;\n    }\n\n    // Para FormData o URLSearchParams, fetch pone el Content-Type correcto automáticamente.\n    // Si 'body' es un objeto JS y method es POST/PUT/PATCH, lo convertimos a JSON\n    // y seteamos Content-Type, a menos que ya se haya seteado.\n    if (options.body && typeof options.body === 'object' &&\n        !(options.body instanceof FormData) &&\n        !(options.body instanceof URLSearchParams) &&\n        !headers['Content-Type'] // No sobrescribir si ya está\n    ) {\n        options.body = JSON.stringify(options.body);\n        headers['Content-Type'] = 'application/json';\n    }\n\n\n    const url = `${API_BASE_URL}${endpoint}`;\n    console.log(`Calling API: ${options.method || 'GET'} ${url}`);\n\n    try {\n        const response = await fetch(url, {\n            ...options,\n            headers,\n        });\n\n        if (!response.ok) {\n            let errorDetail = `API error: ${response.status} ${response.statusText}`;\n            let errorBody = null;\n            try {\n                errorBody = await response.json(); // Intentar parsear cuerpo del error\n                errorDetail += ` - ${errorBody.detail || JSON.stringify(errorBody)}`;\n            } catch (e) { /* No se pudo parsear el cuerpo del error, no hacer nada */ }\n            console.error(\"API call failed:\", errorDetail, \"Full response:\", response);\n            const error = new Error(errorDetail);\n            error.status = response.status;\n            error.body = errorBody; // Guardar el cuerpo del error por si es útil\n            throw error;\n        }\n\n        // Si la respuesta es 204 No Content o similar, no intentar parsear JSON\n        if (response.status === 204) {\n             console.log(\"API call successful (204 No Content).\");\n             return null; // O un objeto indicando éxito, ej. { success: true }\n        }\n\n        // Intentar parsear como JSON si hay contenido\n        const contentType = response.headers.get(\"content-type\");\n        if (contentType && contentType.includes(\"application/json\")) {\n            const data = await response.json();\n            console.log(\"API call successful. Response data:\", data);\n            return data;\n        } else {\n            // Si no es JSON, devolver texto (o manejar como error si siempre esperas JSON)\n            const textData = await response.text();\n            console.log(\"API call successful. Response text data:\", textData);\n            return textData; // O podrías lanzar un error si esperabas JSON\n        }\n\n    } catch (e) {\n        // Esto captura errores de red (Failed to fetch) y errores lanzados arriba\n        console.error(`Workspace operation failed for ${url}:`, e);\n        throw e; // Re-lanzar para que el componente lo maneje\n    }\n};\n\nexport const getUserProgress = async () => {\n    return fetchAuthenticated('/progress');\n};\n\nexport const getLogicProblem = async (difficulty = null) => {\n    const query = difficulty ? `?difficulty=${difficulty}` : '';\n    return fetchAuthenticated(`/problem${query}`);\n};\n\nexport const submitLogicAnswer = async (problemId, answerText) => {\n     console.log(\"Submitting answer via API:\", { problem_id: problemId, answer_text: answerText });\n     // URLSearchParams envía como application/x-www-form-urlencoded\n     // que FastAPI maneja con Form(...)\n     return fetchAuthenticated('/submit_answer', {\n         method: 'POST',\n         body: new URLSearchParams({\n             problem_id: problemId,\n             user_answer: answerText\n         }),\n         // No necesitas Content-Type aquí, fetch lo deduce de URLSearchParams\n     });\n};"
        }
    ]
}