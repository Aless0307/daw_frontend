{
    "sourceFile": "src/pages/AccessibleLogin.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1744949695512,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1745115072855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,13 +3,15 @@\n import { useAuth } from '../context/AuthContext';\n import {playBeep, playPredefinedMessage } from '../services/audioService';\n import { config } from '../config';\n import VoiceRecorder from '../components/VoiceRecorder';\n-import VoiceLogin from '../components/VoiceLogin';\n import FaceRecorder from '../components/FaceRecorder';\n import FaceLogin from '../components/FaceLogin';\n-import BraillePassword from '../components/BraillePassword'\n+import BrailleLogin from '../components/BrailleLogin';\n+import BraillePasswordLogin from '../components/BraillePasswordLogin';\n+import BraillePassword from '../components/BraillePassword';\n import { useLocation } from 'react-router-dom';;\n+import VoiceLoginRecorder from '../components/VoiceLoginRecorder';\n \n // Claves de los mensajes de audio predefinidos\n const AUDIO_MESSAGES = {\n     welcome: \"welcome\",\n@@ -30,9 +32,8 @@\n     registerVoiceGuide: \"registerVoiceGuide\",\n     askUserName: \"askUserName\",\n     userNameConfirmed: \"userNameConfirmed\",\n     emailConfirmed: \"emailConfirmed\",\n-    askPassword: \"askPassword\",\n     passwordConfirmed: \"passwordPrompt\", // Apuntando al audio correcto que s√≠ existe\n     braillePasswordSaved: \"braillePasswordSaved\",\n     \n     // Nuevos mensajes para la grabaci√≥n de voz biom√©trica\n@@ -40,15 +41,21 @@\n     voiceRecordingSample: \"voiceRecordingSample\", \n     voiceRecordingComplete: \"voiceRecordingComplete\",\n     \n     // Nuevo mensaje para la captura facial\n-    faceCapture: \"faceCapture\"\n+    faceCapture: \"faceCapture\",\n+    emailHelp: \"emailHelp\",\n+    loginOptions: \"loginOptions\"\n };\n \n-\n // Clave para almacenar el √∫ltimo mensaje en localStorage\n const LAST_MESSAGE_KEY = 'accessibleLogin_lastAudioMessage';\n \n+// --- Agregar arrays de keywords globales ---\n+const voiceKeywords = ['vocal', 'reconocimiento vocal', 'hablar', 'por voz', 'reconocimiento de voz', 'voz'];\n+const faceKeywords = ['cara', 'facial', 'reconocimiento facial', 'rostro', 'mi cara', 'fotograf√≠a'];\n+const brailleKeywords = ['contrase√±a', 'braille', 'clave', 'password', 'escribir', 'teclear'];\n+\n const AccessibleLogin = () => {\n     console.log('Renderizando AccessibleLogin');\n     \n        // Estados para control de UI\n@@ -68,9 +75,9 @@\n     const [isBrailleComplete, setIsBrailleComplete] = useState(false);\n     \n     // Estados para datos de formulario\n     const [email, setEmail] = useState('');\n-    const [password, setPassword] = useState('');\n+    const [password, setPassword] = useState(''); // Asegura que existe este estado\n     const [username, setUsername] = useState('');\n     \n     // Estados para grabaci√≥n de voz y captura de imagen\n     const [isRecording, setIsRecording] = useState(false);\n@@ -82,8 +89,15 @@\n     const [registrationStep, setRegistrationStep] = useState(null); // null, 'braille', 'voice', 'face', 'complete'\n     const [voiceRegistrationComplete, setVoiceRegistrationComplete] = useState(false);\n     const [playingAudio, setPlayingAudio] = useState(false);\n \n+    // Estados para login accesible\n+    const [loginStep, setLoginStep] = useState(null); // null, 'askMethod', 'askEmail', 'chooseMethod', 'braille', 'success', 'error'\n+    const [loginMethod, setLoginMethod] = useState(null); // 'voice', 'face', 'braille', null\n+\n+    // Estados para mostrar el grabador de voz\n+    const [showVoiceRecorder, setShowVoiceRecorder] = useState(false);\n+\n     // Referencias\n     const audioQueueRef = useRef([]);\n     const isPlayingRef = useRef(false);\n     const hasPlayedWelcomeRef = useRef(false);\n@@ -96,8 +110,9 @@\n     const { login } = useAuth();\n \n     // Dentro de los estados en la parte superior del componente AccessibleLogin\n     const [isLoggingIn, setIsLoggingIn] = useState(false);\n+    const [isSubmitting, setIsSubmitting] = useState(false);\n \n     // Funci√≥n para interrumpir la reproducci√≥n de audio\n     const stopCurrentAudio = () => {\n         if (isPlayingRef.current) {\n@@ -305,11 +320,8 @@\n                     }\n                 }\n             };\n \n-            // Iniciar un intervalo para verificar el silencio cada 100ms\n-            silenceDetectionInterval = setInterval(checkForSilence, 100);\n-\n             recognition.onstart = () => {\n                 console.log('üéôÔ∏è Reconocimiento de voz iniciado');\n             };\n \n@@ -395,9 +407,9 @@\n                 setIsRegistering(false);\n                 setShowVoiceLogin(false);\n                 setShowFaceLogin(false);\n                 setIsLoggingIn(true);\n-                // Reproducir audio despu√©s de un breve retraso para asegurar que el DOM est√© actualizado\n+                startAccessibleLogin();\n                 setTimeout(() => {\n                     console.log('Reproduciendo audio de login...');\n                     queueAudioMessage(AUDIO_MESSAGES.login);\n                 }, 200);\n@@ -526,11 +538,9 @@\n                         setTimeout(() => {\n                             setIsRegistering(true);\n                             // NO reproducir audio nuevamente despu√©s del cambio forzado\n                             // Se elimin√≥ la siguiente secci√≥n para evitar duplicaci√≥n:\n-                            // setTimeout(() => {\n-                            //     queueAudioMessage(AUDIO_MESSAGES.register);\n-                            // }, 300);\n+                            // setTimeout(() => queueAudioMessage(AUDIO_MESSAGES.register), 300);\n                         }, 50); // Restaurar valor deseado\n                         break;\n                     case 'voiceLogin':\n                         setShowVoiceLogin(prev => !prev);\n@@ -562,8 +572,109 @@\n             }\n         }, 200);\n     };\n \n+    // ====================\n+    // FUNCION REUTILIZADA PARA DETECTAR EMAIL EN LOGIN Y REGISTRO\n+    // ====================\n+    const detectAndConfirmEmail = (normalizedText) => {\n+        // Patrones mejorados para reconocer correos electr√≥nicos con frases introductorias\n+        const emailPattern1 = /mi (correo|email|mail|e-mail|direcci√≥n)( electr√≥nico)? es ([a-zA-Z0-9._-]+)@([a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})/i;\n+        const emailPattern2 = /([a-zA-Z0-9._-]+)@([a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}) es mi (correo|email|mail|e-mail|direcci√≥n)( electr√≥nico)?/i;\n+\n+        let match;\n+        const playOptionsAudio = () => {\n+            // Reproduce un audio claro con las opciones disponibles\n+            queueAudioMessage(AUDIO_MESSAGES.emailConfirmed);\n+            setTimeout(() => {\n+                queueAudioMessage('loginOptions'); // Debes tener este audio generado, si no existe, se puede crear\n+            }, 1200);\n+        };\n+        if ((match = normalizedText.match(emailPattern1))) {\n+            const extractedEmail = `${match[3]}@${match[4]}`;\n+            console.log('‚úÖ Correo electr√≥nico reconocido (patr√≥n 1):', extractedEmail);\n+            if (/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(extractedEmail)) {\n+                setEmail(extractedEmail);\n+                if (isListening) handleStopListening();\n+                if (loginStep !== 'chooseMethod') {\n+                    setLoginStep('chooseMethod');\n+                    playOptionsAudio();\n+                }\n+                return true;\n+            }\n+        } else if ((match = normalizedText.match(emailPattern2))) {\n+            const extractedEmail = `${match[1]}@${match[2]}`;\n+            console.log('‚úÖ Correo electr√≥nico reconocido (patr√≥n 2):', extractedEmail);\n+            if (/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(extractedEmail)) {\n+                setEmail(extractedEmail);\n+                if (isListening) handleStopListening();\n+                if (loginStep !== 'chooseMethod') {\n+                    setLoginStep('chooseMethod');\n+                    playOptionsAudio();\n+                }\n+                return true;\n+            }\n+        }\n+        // Normalizaci√≥n adicional (hablado)\n+        const letterToCharMap = {\n+            a: 'a', be: 'b', ce: 'c', de: 'd', e: 'e', efe: 'f', ge: 'g',\n+            hache: 'h', i: 'i', jota: 'j', ka: 'k', ele: 'l', eme: 'm', ene: 'n',\n+            e√±e: '√±', o: 'o', pe: 'p', cu: 'q', ere: 'r', ese: 's', te: 't',\n+            u: 'u', ve: 'v', uve: 'v', 'doble ve': 'w', equis: 'x', ye: 'y', zeta: 'z',\n+            'i griega': 'y', cero: '0', uno: '1', dos: '2', tres: '3', cuatro: '4',\n+            cinco: '5', seis: '6', siete: '7', ocho: '8', nueve: '9',\n+            'veinticinco': '25', 'setenta y ocho': '78', 'treinta y cuatro': '34',\n+            'diez': '10', 'once': '11', 'doce': '12', 'trece': '13', 'catorce': '14',\n+            'quince': '15', 'diecis√©is': '16', 'diecisiete': '17', 'dieciocho': '18',\n+            'diecinueve': '19', 'veinte': '20', 'treinta': '30', 'cuarenta': '40',\n+            'cincuenta': '50', 'sesenta': '60', 'setenta': '70', 'ochenta': '80',\n+            'noventa': '90', 'cien': '100',\n+        };\n+        const specialMap = {\n+            'guion bajo': '_', 'gui√≥n bajo': '_', underscore: '_',\n+            'guion medio': '-', 'gui√≥n medio': '-', menos: '-',\n+            punto: '.', dot: '.', arroba: '@', 'at': '@',\n+            'a-': '@', 'a roba': '@', 'at sign': '@', 'a rroba': '@',\n+            'a rova': '@', 'arraba': '@', 'a-roba': '@',\n+            'a-rroba': '@', 'a-raba': '@',\n+        };\n+        function normalizeSpokenEmail(text) {\n+            let processed = text.toLowerCase();\n+            processed = processed.replace(/mi (correo|email|mail|e-mail|direcci√≥n)( electr√≥nico)? es /i, '');\n+            processed = processed.replace(/ es mi (correo|email|mail|e-mail|direcci√≥n)( electr√≥nico)?/i, '');\n+            for (const [key, val] of Object.entries(specialMap)) {\n+                processed = processed.replaceAll(key, ` ${val} `);\n+            }\n+            const words = processed.split(/\\s+/).filter(Boolean);\n+            const emailParts = words.map(w => {\n+                if (/^[a-zA-Z0-9._-]+$/.test(w)) {\n+                    return w;\n+                }\n+                return letterToCharMap[w] || w;\n+            }).join('');\n+            console.log('Texto procesado para email:', processed);\n+            console.log('Email normalizado:', emailParts);\n+            sessionStorage.setItem('correovocal', emailParts);\n+            return emailParts;\n+        }\n+        const spokenText = normalizeSpokenEmail(normalizedText);\n+        const emailRegex = /([a-zA-Z0-9._-]+)@([a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})/;\n+        const matchSpoken = spokenText.match(emailRegex);\n+        if (matchSpoken) {\n+            const email = `${matchSpoken[1]}@${matchSpoken[2]}`;\n+            if (/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)) {\n+                setEmail(email);\n+                if (isListening) handleStopListening();\n+                if (loginStep !== 'chooseMethod') {\n+                    setLoginStep('chooseMethod');\n+                    playOptionsAudio();\n+                }\n+                return true;\n+            }\n+        }\n+        return false;\n+    };\n+\n     // Funci√≥n para procesar el texto reconocido\n     const processUserSpeech = (text) => {\n         console.log('===================== PROCESANDO TEXTO =====================');\n         console.log('Texto recibido:', text);\n@@ -575,26 +686,29 @@\n             console.log('‚ö†Ô∏è No hay texto para procesar');\n             return;\n         }\n         \n-        // Normalizar el texto para facilitar la detecci√≥n de comandos\n         const normalizedText = text.toLowerCase().trim();\n-        \n-        // Funci√≥n para verificar si el texto contiene alguna de las palabras clave\n-        const containsAny = (keywords) => {\n-            return keywords.some(keyword => normalizedText.includes(keyword));\n-        };\n-        \n-        // Si estamos en modo registro, verificar si el usuario est√° proporcionando datos\n+        const containsAny = (keywords) => keywords.some(keyword => normalizedText.includes(keyword));\n+\n+        // 1. Si estamos en login (no registro), a√∫n no hay email, y no estamos en m√©todos alternativos, primero intenta reconocer el email\n+        if (isLoggingIn && !email && !showVoiceLogin && !showFaceLogin && !showBrailleInput) {\n+            if (detectAndConfirmEmail(normalizedText)) {\n+                return; // Si reconoce el email, no sigue procesando comandos\n+            }\n+        }\n+\n+        // 2. Si estamos en registro, procesa datos de registro (sin cambios)\n         if (isRegistering) {\n-            console.log('üß© Procesando input durante registro');\n-            \n             // Patrones para reconocer datos de registro\n             const usernamePattern1 = /mi nombre (de usuario )?es\\s+([a-zA-Z0-9√°√©√≠√≥√∫√Å√â√ç√ì√ö√º√ú√±√ë]+)/i;\n             const usernamePattern2 = /([a-zA-Z0-9√°√©√≠√≥√∫√Å√â√ç√ì√ö√º√ú√±√ë]+)\\s+es mi nombre/i;\n             const usernamePattern3 = /me llamo\\s+([a-zA-Z0-9√°√©√≠√≥√∫√Å√â√ç√ì√ö√º√ú√±√ë]+)/i;\n-            const emailPattern3 = /mi (correo|email|mail|e-mail|direcci√≥n)( electr√≥nico)? es ([a-zA-Z0-9]+)( guion bajo| gui√≥n bajo| underscore)([a-zA-Z0-9]+) arroba ([a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})/i;\n             \n+            // Patrones mejorados para reconocer correos electr√≥nicos con frases introductorias\n+            const emailPattern1 = /mi (correo|email|mail|e-mail|direcci√≥n)( electr√≥nico)? es ([a-zA-Z0-9._-]+)@([a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})/i;\n+            const emailPattern2 = /([a-zA-Z0-9._-]+)@([a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}) es mi (correo|email|mail|e-mail|direcci√≥n)( electr√≥nico)?/i;\n+            \n             // Verificar si est√° diciendo su nombre de usuario\n             let match;\n             if ((match = normalizedText.match(usernamePattern1))) {\n                 const extractedUsername = match[2];\n@@ -634,39 +748,101 @@\n                     playWithFallback(\"askEmail\", \"Por favor, dime tu correo electr√≥nico.\");\n                 }, 2000);\n                 return;\n             }\n+            \n+            // Verificar si est√° diciendo su correo directamente\n+            if ((match = normalizedText.match(emailPattern1))) {\n+                const extractedEmail = `${match[3]}@${match[4]}`;\n+                console.log('‚úÖ Correo electr√≥nico reconocido (patr√≥n 1):', extractedEmail);\n+                if (/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(extractedEmail)) {\n+                    setEmail(extractedEmail);\n+                    queueAudioMessage(AUDIO_MESSAGES.emailConfirmed);\n+                    queueAudioMessage(AUDIO_MESSAGES.passwordConfirmed);\n+                    if (isListening) handleStopListening();\n+                    setShowBrailleInput(true);\n+                    return;\n+                }\n+            } else if ((match = normalizedText.match(emailPattern2))) {\n+                const extractedEmail = `${match[1]}@${match[2]}`;\n+                console.log('‚úÖ Correo electr√≥nico reconocido (patr√≥n 2):', extractedEmail);\n+                if (/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(extractedEmail)) {\n+                    setEmail(extractedEmail);\n+                    queueAudioMessage(AUDIO_MESSAGES.emailConfirmed);\n+                    queueAudioMessage(AUDIO_MESSAGES.passwordConfirmed);\n+                    if (isListening) handleStopListening();\n+                    setShowBrailleInput(true);\n+                    return;\n+                }\n+            }\n+            \n             const letterToCharMap = {\n                 a: 'a', be: 'b', ce: 'c', de: 'd', e: 'e', efe: 'f', ge: 'g',\n                 hache: 'h', i: 'i', jota: 'j', ka: 'k', ele: 'l', eme: 'm', ene: 'n',\n                 e√±e: '√±', o: 'o', pe: 'p', cu: 'q', ere: 'r', ese: 's', te: 't',\n                 u: 'u', ve: 'v', uve: 'v', 'doble ve': 'w', equis: 'x', ye: 'y', zeta: 'z',\n                 'i griega': 'y', cero: '0', uno: '1', dos: '2', tres: '3', cuatro: '4',\n                 cinco: '5', seis: '6', siete: '7', ocho: '8', nueve: '9',\n+                // A√±adir variantes para n√∫meros\n+                'veinticinco': '25', 'setenta y ocho': '78', 'treinta y cuatro': '34',\n+                // A√±adir n√∫meros comunes\n+                'diez': '10', 'once': '11', 'doce': '12', 'trece': '13', 'catorce': '14',\n+                'quince': '15', 'diecis√©is': '16', 'diecisiete': '17', 'dieciocho': '18',\n+                'diecinueve': '19', 'veinte': '20', 'treinta': '30', 'cuarenta': '40',\n+                'cincuenta': '50', 'sesenta': '60', 'setenta': '70', 'ochenta': '80',\n+                'noventa': '90', 'cien': '100',\n               };\n               \n               const specialMap = {\n                 'guion bajo': '_', 'gui√≥n bajo': '_', underscore: '_',\n                 'guion medio': '-', 'gui√≥n medio': '-', menos: '-',\n-                punto: '.', dot: '.', arroba: '@',\n+                punto: '.', dot: '.', arroba: '@', 'at': '@',\n+                // A√±adir m√°s variantes para arroba\n+                'a-': '@', 'a roba': '@', 'at sign': '@', 'a rroba': '@',\n+                'a rova': '@', 'arraba': '@', 'a-roba': '@',\n+                'a-rroba': '@', 'a-raba': '@',\n               };\n               \n               function normalizeSpokenEmail(text) {\n+                // Eliminar frases introductorias comunes\n                 let processed = text.toLowerCase();\n-              \n+                processed = processed.replace(/mi (correo|email|mail|e-mail|direcci√≥n)( electr√≥nico)? es /i, '');\n+                processed = processed.replace(/ es mi (correo|email|mail|e-mail|direcci√≥n)( electr√≥nico)?/i, '');\n+                \n+                // Reemplazar palabras especiales\n                 for (const [key, val] of Object.entries(specialMap)) {\n                   processed = processed.replaceAll(key, ` ${val} `);\n                 }\n-              \n+                \n+                // Manejar espacios y separar palabras\n                 const words = processed.split(/\\s+/).filter(Boolean);\n-                const emailParts = words.map(w => letterToCharMap[w] || w).join('');\n+                \n+                // Detectar y preservar partes alfanum√©ricas antes de mapear\n+                const emailParts = words.map(w => {\n+                  // Si es alfanum√©rico, preservarlo\n+                  if (/^[a-zA-Z0-9._-]+$/.test(w)) {\n+                    return w;\n+                  }\n+                  // Si es una letra o n√∫mero hablado, mapearlo\n+                  return letterToCharMap[w] || w;\n+                }).join('');\n+                \n+                console.log('Texto procesado para email:', processed);\n+                console.log('Email normalizado:', emailParts);\n+                \n                 return emailParts;\n               }\n               \n               function confirmEmail(email) {\n                 setEmail(email);\n+                \n+                // Usar solo mensajes de audio que sabemos que existen\n                 queueAudioMessage(AUDIO_MESSAGES.emailConfirmed);\n-                queueAudioMessage(AUDIO_MESSAGES.passwordConfirmed);\n+                \n+                // Esperar un poco antes de reproducir el siguiente mensaje\n+                setTimeout(() => {\n+                  queueAudioMessage(AUDIO_MESSAGES.passwordConfirmed);\n+                }, 500);\n               \n                 let verbalEmail = '';\n                 for (const char of email) {\n                   verbalEmail += {\n@@ -682,78 +858,121 @@\n                 console.log('‚úÖ Correo confirmado y se activa interfaz de braille:', email);\n               }\n               \n               function handleEmailRecognition(normalizedText) {\n+                console.log('üîç Analizando texto para email:', normalizedText);\n+                \n+                // Primero, eliminar espacios antes del @ para manejar casos como \"usuario h 25@gmail.com\"\n+                let processedText = normalizedText;\n+                const atIndex = processedText.indexOf('@');\n+                if (atIndex > 0) {\n+                  // Reemplazar espacios con nada en la parte del nombre de usuario\n+                  const usernamePart = processedText.substring(0, atIndex).replace(/\\s+/g, '');\n+                  const domainPart = processedText.substring(atIndex);\n+                  processedText = usernamePart + domainPart;\n+                  console.log('üîÑ Procesando email con espacios:', normalizedText, '‚Üí', processedText);\n+                }\n+                \n+                // Intentar extraer directamente un email completo\n+                const directEmailRegex = /([a-zA-Z0-9._-]+)@([a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})/;\n+                const directMatch = processedText.match(directEmailRegex);\n+                \n+                if (directMatch) {\n+                  const email = `${directMatch[1]}@${directMatch[2]}`;\n+                  if (/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)) {\n+                    console.log('‚úÖ Email reconocido directamente:', email);\n+                    confirmEmail(email);\n+                    return;\n+                  }\n+                }\n+                \n+                // Si no hay match directo, procesar el texto para reconocer partes del email\n                 const spokenText = normalizeSpokenEmail(normalizedText);\n                 const emailRegex = /([a-zA-Z0-9._-]+)@([a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})/;\n                 const match = spokenText.match(emailRegex);\n-              \n+                \n                 if (match) {\n                   const email = `${match[1]}@${match[2]}`;\n                   if (/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)) {\n+                    console.log('‚úÖ Email reconocido despu√©s de procesamiento:', email);\n                     confirmEmail(email);\n                   } else {\n                     console.warn('‚ùå Email inv√°lido despu√©s de procesar:', email);\n+                    // Intentar corregir errores comunes\n+                    let correctedEmail = email;\n+                    \n+                    // Corregir dominios comunes mal escritos\n+                    if (email.includes('@gmail')) correctedEmail = correctedEmail.replace(/@gmail[^.]*/, '@gmail.com');\n+                    if (email.includes('@hotmail')) correctedEmail = correctedEmail.replace(/@hotmail[^.]*/, '@hotmail.com');\n+                    if (email.includes('@yahoo')) correctedEmail = correctedEmail.replace(/@yahoo[^.]*/, '@yahoo.com');\n+                    if (email.includes('@outlook')) correctedEmail = correctedEmail.replace(/@outlook[^.]*/, '@outlook.com');\n+                    \n+                    if (correctedEmail !== email && /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(correctedEmail)) {\n+                      console.log('‚úÖ Email corregido autom√°ticamente:', correctedEmail);\n+                      confirmEmail(correctedEmail);\n+                    }\n                   }\n                 } else {\n                   console.log('‚ö†Ô∏è Texto no contiene email reconocido:', spokenText);\n+                  \n+                  // Intentar extraer partes de un posible email\n+                  const usernamePart = /([a-zA-Z0-9._-]+)/i.exec(spokenText);\n+                  if (usernamePart && usernamePart[1].length > 3) {\n+                    console.log('‚ö†Ô∏è Posible nombre de usuario de email detectado:', usernamePart[1]);\n+                    // No confirmar autom√°ticamente, solo mostrar mensaje de ayuda\n+                    queueAudioMessage(AUDIO_MESSAGES.askEmail || AUDIO_MESSAGES.notUnderstood);\n+                  }\n                 }\n               }\n               handleEmailRecognition(normalizedText);\n         }\n         \n-        // Procesar comandos de navegaci√≥n general\n-        // Palabras clave para cada acci√≥n\n+        // 3. Procesar comandos generales SOLO si no estamos capturando email\n         const registerKeywords = ['registrar', 'registro', 'crear cuenta', 'nueva cuenta', 'inscribirme', \n                                 'registrarme', 'inscribir', 'registra', 'registrame', 'inscribirte'];\n         const loginKeywords = ['iniciar', 'login', 'entrar', 'sesi√≥n', 'iniciar sesi√≥n', 'entrar sesi√≥n', \n                                'inicia', 'ingreso', 'ingresar', 'acceder', 'acceso'];\n-        const voiceKeywords = ['voz', 'reconocimiento de voz', 'hablar', 'por voz'];\n-        const faceKeywords = ['cara', 'facial', 'reconocimiento facial', 'rostro', 'mi cara', 'fotograf√≠a'];\n         const cancelKeywords = ['cancelar', 'volver', 'regresar', 'atr√°s', 'salir', 'cancela'];\n-        \n+\n         console.log('Analizando comando en texto normalizado:', normalizedText);\n-        \n-        // Procesar comandos de navegaci√≥n general primero, independientemente del estado actual\n+\n         if (containsAny(loginKeywords)) {\n             console.log('‚úÖ Comando reconocido: iniciar sesi√≥n');\n             updateAppState('login');\n             return;\n         } \n-        \n         if (containsAny(registerKeywords)) {\n             console.log('‚úÖ Comando reconocido: registrarse');\n             console.log('Palabras clave detectadas: registrar, registro, crear cuenta, etc.');\n             updateAppState('register');\n             return;\n         } \n-        \n-        if (containsAny(voiceKeywords)) {\n+        if (voiceKeywords.some(keyword => normalizedText.includes(keyword))) {\n             console.log('‚úÖ Comando reconocido: login por voz');\n             updateAppState('voiceLogin');\n             return;\n         } \n-        \n-        if (containsAny(faceKeywords)) {\n+        if (faceKeywords.some(keyword => normalizedText.includes(keyword))) {\n             console.log('‚úÖ Comando reconocido: login facial');\n             updateAppState('faceLogin');\n             return;\n         }\n+        if ((isRegistering || showVoiceLogin || showFaceLogin) && containsAny(cancelKeywords)) {\n+            console.log('‚úÖ Comando reconocido: cancelar/volver');\n+            updateAppState('backToMain');\n+            return;\n+        }\n \n-        // Si llegamos aqu√≠, no fue un comando de navegaci√≥n principal\n-        // Ahora procesamos comandos espec√≠ficos del estado actual\n-        if (isRegistering || showVoiceLogin || showFaceLogin) {\n-            if (containsAny(cancelKeywords)) {\n-                console.log('‚úÖ Comando reconocido: cancelar/volver');\n-                updateAppState('backToMain');\n-                return;\n-            }\n-        }\n-        \n         // Si llegamos aqu√≠, no se reconoci√≥ ning√∫n comando\n         console.log('‚ùå Comando no reconocido');\n         console.log('Comandos disponibles: \"iniciar sesi√≥n\", \"registrarse\", \"voz\", \"facial\", \"cancelar\"');\n-        queueAudioMessage(AUDIO_MESSAGES.notUnderstood);\n+        if (sessionStorage.getItem('brailleactivado') === 'false') {\n+            queueAudioMessage(AUDIO_MESSAGES.notUnderstood);\n+        }\n+        // Si estamos en login, delega a processLoginSpeech como fallback\n+        if (!isRegistering && isLoggingIn) {\n+            processLoginSpeech(text);\n+        }\n     };\n \n     const handleStopListening = () => {\n         setIsListening(false);\n@@ -782,8 +1001,11 @@\n         \n         // Guardar el audioBlob\n         setAudioBlob(audioBlob);\n         \n+        // Tambi√©n guardar en window para que FaceRecorder pueda accederlo\n+        window.recordedAudioBlob = audioBlob;\n+        \n         // Registro de datos sobre el audio grabado\n         const audioBlobSizeKB = (audioBlob.size / 1024).toFixed(2);\n         console.log(\"\\n%c========== DATOS DE GRABACI√ìN DE VOZ ==========\", \"color: #4CAF50; font-weight: bold; font-size: 14px;\");\n         console.log(\"%cTama√±o: %c\" + audioBlobSizeKB + \" KB\", \"color: #2196F3; font-weight: bold\", \"color: #000; font-weight: normal\");\n@@ -807,9 +1029,9 @@\n             const cameraButton = document.getElementById('iniciarCamaraBtn');\n             \n             if (cameraButton) {\n                 console.log('‚úÖ Bot√≥n de c√°mara encontrado por ID. Activando captura facial autom√°ticamente...');\n-                // Introducir un peque√±o retraso para asegurar que el DOM est√° listo\n+                // Introducir un peque√±o retraso para asegurar que el DOM est√© listo\n                 setTimeout(() => {\n                     cameraButton.click();\n                     console.log('‚úÖ Clic en bot√≥n de c√°mara ejecutado');\n                 }, 100);\n@@ -862,9 +1084,9 @@\n         // Esperar un momento antes de reproducir el mensaje de √©xito\n         setTimeout(() => {\n             // Reproducir mensaje de √©xito\n             setPlayingAudio(true);\n-            queueAudioMessage(AUDIO_MESSAGES.loginSuccess);\n+            queueAudioMessage(AUDIO_MESSAGES.voiceRecordingComplete);\n             \n             // Esperar a que termine el audio de √©xito antes de reproducir instrucciones para la captura facial\n             setTimeout(() => {\n                 // Asegurarse de que no se active el micr√≥fono nuevamente\n@@ -921,36 +1143,30 @@\n         setIsCapturing(false);\n     };\n \n     // Funci√≥n para enviar formulario\n-    const handleSubmit = async (e) => {\n+    const handleSubmit = async (e, isBraille = false) => {\n         e.preventDefault();\n         setError('');\n         setSuccess('');\n+        setIsSubmitting(true);\n \n-        // Imprimir los datos del formulario en la consola\n-        console.log('Datos del formulario enviado:', {\n-            username,\n-            email,\n-            password,\n-            isRegistering,\n-            tieneAudioBiometrico: !!audioBlob,\n-            tieneFotoBiometrica: !!photoBlob\n-        });\n+        const password = sessionStorage.getItem('email');\n+        sessionStorage.setItem('password', password);\n+        sessionStorage.setItem('email', email);\n \n-        // Validar campos\n         if (isRegistering) {\n             if (!username || !email || !password) {\n                 setError('Por favor completa todos los campos');\n+                setIsSubmitting(false);\n                 return;\n             }\n \n             const formData = new FormData();\n             formData.append('username', username);\n             formData.append('email', email);\n             formData.append('password', password);\n \n-\n             if(audioBlob){\n                 formData.append('voice_recording', audioBlob, 'voice.wav');\n             }\n             \n@@ -958,8 +1174,9 @@\n                 formData.append('face_photo', photoBlob, 'face.jpg');\n             }\n \n             try {\n+                console.log('DEBUG: password al enviar login:', password);\n                 const response = await fetch(`${config.API_URL}/auth/register`, {\n                     method: 'POST',\n                     body: formData\n                 });\n@@ -982,61 +1199,97 @@\n                 console.error('Error en el registro:', err);\n                 setError('Error al conectar con el servidor');\n                 queueAudioMessage(AUDIO_MESSAGES.loginError);\n             }\n-        } else {\n-            if (!username || !password) {\n-                setError('Por favor completa todos los campos');\n-                return;\n-            }\n-\n+        } \n+        else if (isBraille) {\n+            sessionStorage.clear();\n+            // LOGIN BRAILLE\n             try {\n-                const loginData = new URLSearchParams({username, password});\n-                \n+                const formData = new FormData();\n+                formData.append('username', email);\n+                formData.append('password', password);\n+        \n+                console.log('üì§ Enviando datos al backend:', {\n+                    endpoint: `${config.API_URL}/auth/login`,\n+                    username: email,\n+                    password\n+                });\n+        \n                 const response = await fetch(`${config.API_URL}/auth/login`, {\n                     method: 'POST',\n-                    headers: {\n-                        'Content-Type': 'application/x-www-form-urlencoded',\n-                    },\n-                    body: loginData\n+                    body: formData\n                 });\n-\n+        \n+                console.log('üì• Respuesta recibida del servidor:', response);\n+        \n                 if (!response.ok) {\n-                    const errorData = await response.json();\n-                    throw new Error(errorData.detail || 'Error en el inicio de sesi√≥n');\n+                    const errData = await response.json();\n+                    let errorMsg = 'Error en el inicio de sesi√≥n';\n+        \n+                    if (typeof errData.detail === 'string') errorMsg = errData.detail;\n+                    else if (typeof errData.msg === 'string') errorMsg = errData.msg;\n+                    else if (Array.isArray(errData) && errData.length && typeof errData[0].msg === 'string') errorMsg = errData[0].msg;\n+                    else errorMsg = JSON.stringify(errData);\n+        \n+                    console.error('‚ùå Error en login:', errorMsg);\n+                    setError(errorMsg);\n+                    setIsSubmitting(false);\n+                    return;\n                 }\n-\n+        \n                 const data = await response.json();\n-                \n+                console.log('‚úÖ Login exitoso. Datos recibidos:', data);\n+        \n                 if (!data.access_token) {\n+                    console.error('‚ùå No se recibi√≥ access_token en la respuesta.');\n                     throw new Error('No se recibi√≥ token en la respuesta');\n                 }\n-\n-                const loginDataToSend = {\n+        \n+                login({\n                     token: data.access_token,\n-                    username: data.username || username,\n+                    username: data.username || email,\n                     email: data.email || email\n-                };\n-\n-                login(loginDataToSend);\n-                queueAudioMessage(AUDIO_MESSAGES.loginSuccess);\n-                setTimeout(() => navigate('/home'), 2000);\n+                });\n+        \n+                console.log('‚û°Ô∏è Login ejecutado correctamente. Redirigiendo a /home...');\n+                navigate('/home');\n             } catch (err) {\n-                console.error('Error en el inicio de sesi√≥n:', err);\n+                console.error('üö® Error inesperado al iniciar sesi√≥n:', err);\n                 setError('Error al conectar con el servidor');\n-                queueAudioMessage(AUDIO_MESSAGES.loginError);\n+                setIsSubmitting(false);\n             }\n+            // Termina LOGIN BRAILLE            \n         }\n+        else {\n+            // LOGIN\n+            const email = sessionStorage.getItem('email');\n+            const password = sessionStorage.getItem('password');\n+            if (!email || !password) {\n+                console.log('eL ERROR FUE ANTES\\n########################################################');\n+                setError('Por favor completa todos los campos');\n+                setIsSubmitting(false);\n+                return;\n+            }\n+            \n+        }\n     };\n \n-    // Modificar el useEffect que reproduce la bienvenida al cargar el componente\n-    useEffect(() => {\n-        console.log('üéôÔ∏è Inicializando componente de login accesible');\n-        \n-        // No reproducir autom√°ticamente el mensaje de bienvenida\n-        // La reproducci√≥n se manejar√° a trav√©s de handleUserInteraction despu√©s de la primera interacci√≥n\n-        \n-    }, []);\n+    // Funci√≥n para iniciar el flujo de login accesible\n+    const startAccessibleLogin = () => {\n+        setLoginStep('askEmail');\n+        setShowVoiceLogin(false);\n+        setShowFaceLogin(false);\n+        setShowBrailleInput(false);\n+        setIsBrailleComplete(false);\n+        setLoginMethod(null);\n+        setEmail('');\n+        setPassword('');\n+        queueAudioMessage('login');\n+        setTimeout(() => {\n+            queueAudioMessage('emailHelp');\n+        }, 2000);\n+    };\n \n     // Funci√≥n para reproducir un mensaje con respaldo de s√≠ntesis de voz\n     const playWithFallback = (messageKey, fallbackText) => {\n         try {\n@@ -1062,49 +1315,43 @@\n                 })\n                 .catch(error => {\n                     console.error(`Error al verificar audio ${messageKey}:`, error);\n                 });\n-        } catch (error) {\n-            console.error(`Error al reproducir mensaje ${messageKey}:`, error);\n+        } catch (err) {\n+            // Este catch solo captura errores sincr√≥nicos\n+            console.error(\"Error en playWithFallback:\", err);\n         }\n     };\n \n     // Funci√≥n para manejar la contrase√±a en braille\n+    const handleBrailleLogin = (email, BraillePasswordLogin) => {\n+        setPassword(BraillePasswordLogin);\n+        setShowBrailleInput(false);\n+        setIsBrailleComplete(true);\n+        sessionStorage.setItem('email', email);\n+        sessionStorage.setItem('passwordLogin', BraillePasswordLogin);\n+        console.log(\"esto se ejecuta antes\\n#################################################################################################################\")\n+        setTimeout(() => {\n+            handleSubmit({ preventDefault: () => {} }, true); // true indica login braille\n+        }, 1000); // puedes ajustar este tiempo si necesitas m√°s margen\n+        \n+    };\n+\n+    const handleCancelBrailleLogin = () => {\n+        setShowBrailleInput(false);\n+        setLoginStep('chooseMethod');\n+    };\n+\n+    // Funci√≥n para manejar la contrase√±a en braille durante el registro\n     const handleBraillePasswordComplete = (braillePassword) => {\n-        queueAudioMessage(AUDIO_MESSAGES.braillePasswordSaved);\n-        console.log(\"Contrase√±a braille completada:\", braillePassword);\n         setPassword(braillePassword);\n         setShowBrailleInput(false);\n         setIsBrailleComplete(true);\n-\n+        sessionStorage.setItem('password', braillePassword);\n+        sessionStorage.setItem('email', email);\n         sessionStorage.setItem('username', username);\n-        sessionStorage.setItem('email', email);\n-        sessionStorage.setItem('password', braillePassword);\n-        // Imprimir en la consola los datos de registro capturados hasta el momento\n-        console.log(\"\\n%c========== DATOS DE REGISTRO CAPTURADOS ==========\", \"color: #4CAF50; font-weight: bold; font-size: 14px;\");\n-        console.log(\"%cUsuario: %c\" + username, \"color: #2196F3; font-weight: bold\", \"color: #000; font-weight: normal\");\n-        console.log(\"%cCorreo: %c\" + email, \"color: #2196F3; font-weight: bold\", \"color: #000; font-weight: normal\");\n-        console.log(\"%cContrase√±a: %c\" + braillePassword, \"color: #2196F3; font-weight: bold\", \"color: #000; font-weight: normal\");\n-        console.log(\"%c===================================================\", \"color: #4CAF50; font-weight: bold; font-size: 14px;\");\n-\n-        // Dar tiempo adicional para que el componente se actualice y renderice el VoiceRecorder\n-        setTimeout(() => {\n-            try {\n-                console.log('üîç Buscando bot√≥n de grabaci√≥n para activarlo autom√°ticamente...');\n-                // Usar m√∫ltiples selectores en caso de que uno no funcione\n-                const selector = '.voice-recorder-container button';\n-                const recordButton = document.querySelector(selector);\n-                \n-                if (recordButton) {\n-                    console.log('‚úÖ Bot√≥n de grabaci√≥n encontrado. Activando grabaci√≥n de voz autom√°ticamente...');\n-                    recordButton.click();\n-                } else {\n-                    console.error('‚ùå No se encontr√≥ el bot√≥n de grabaci√≥n');\n-                }\n-            } catch (error) {\n-                console.error('Error al activar la grabaci√≥n de voz:', error);\n-            }\n-        }, 3000); // Aumentar tiempo de espera a 3000ms para asegurar que el componente est√© montado\n+        setShowVoiceRecorder(true); // Nuevo estado para mostrar el grabador de voz\n+        // Puedes agregar l√≥gica adicional aqu√≠, como avanzar al siguiente paso del registro\n     };\n \n     // Verificar el estado de showBrailleInput\n     useEffect(() => {\n@@ -1117,8 +1364,12 @@\n             \n         }\n     }, [showBrailleInput]);\n \n+    useEffect(() => {\n+        console.log('DEBUG password state:', password);\n+    }, [password]);\n+\n     const [wasRegistered, setWasRegistered] = useState(false);\n \n     useEffect(() => {\n       const registeredFlag = sessionStorage.getItem('registered');\n@@ -1126,10 +1377,61 @@\n         setWasRegistered(true);\n         sessionStorage.removeItem('registered'); // Limpiar para que no se muestre otra vez\n       }\n     }, []);\n-    \n \n+    // Funci√≥n para procesar lo que dice el usuario durante login\n+    const processLoginSpeech = (text) => {\n+        const normalizedText = text.trim().toLowerCase();\n+        if (loginStep === 'askEmail') {\n+            // Intentar reconocer correo\n+            handleEmailRecognition(normalizedText);\n+            // Si se reconoce, pasar al siguiente paso\n+            if (/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(normalizedText) || email) {\n+                setLoginStep('chooseMethod');\n+                setTimeout(() => {\n+                    queueAudioMessage('askLoginOrRegister');\n+                }, 1000);\n+            }\n+            return;\n+        }\n+        if (loginStep === 'chooseMethod') {\n+            if (voiceKeywords.some(keyword => normalizedText.includes(keyword))) {\n+                setLoginMethod('voice');\n+                setShowVoiceLogin(true);\n+                setShowFaceLogin(false);\n+                setShowBrailleInput(false);\n+                queueAudioMessage('voiceLogin');\n+            } else if (faceKeywords.some(keyword => normalizedText.includes(keyword))) {\n+                setLoginMethod('face');\n+                setShowVoiceLogin(false);\n+                setShowFaceLogin(true);\n+                setShowBrailleInput(false);\n+                queueAudioMessage('faceLogin');\n+            } else if (brailleKeywords.some(keyword => normalizedText.includes(keyword))) {\n+                setLoginMethod('braille');\n+                setShowVoiceLogin(false);\n+                setShowFaceLogin(false);\n+                setShowBrailleInput(true);\n+                queueAudioMessage('passwordPrompt');\n+            } else {\n+                queueAudioMessage('notUnderstood');\n+            }\n+            return;\n+        }\n+    };\n+\n+    // Cleanup global variables when component unmounts\n+    useEffect(() => {\n+        return () => {\n+            // Cleanup window objects when component unmounts\n+            if (window.recordedAudioBlob) {\n+                console.log(\"üßπ Limpiando audio blob global al desmontar AccessibleLogin\");\n+                window.recordedAudioBlob = null;\n+            }\n+        };\n+    }, []);\n+\n     return (\n         \n         <div \n             className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-indigo-100 to-white py-12 px-4 sm:px-6 lg:px-8\"\n@@ -1177,58 +1479,99 @@\n                         </div>\n                     )}\n                 </div>\n \n-                {!showVoiceLogin && !showFaceLogin ? (\n-                    showBrailleInput ? (\n-                        <div className=\"mt-8 braille-container\">\n-                            <h3 className=\"text-lg font-medium text-center text-blue-800 mb-4\">\n-                                Creaci√≥n de contrase√±a mediante Braille\n-                            </h3>\n-                            <p className=\"text-sm text-center text-gray-600 mb-4\">\n-                                Indica verbalmente los puntos del patr√≥n braille para crear tu contrase√±a\n-                            </p>\n-                            <BraillePassword onPasswordComplete={handleBraillePasswordComplete} />\n-                        </div>\n-                    ) : (\n-                        <>\n-                            <form className=\"mt-8 space-y-6\" onSubmit={handleSubmit}>\n+                {isLoggingIn && !showVoiceLogin && !showFaceLogin && !showBrailleInput && (\n+                    // SOLO mostrar el input de email SIN recuadro ni bot√≥n\n+                    <div className=\"mt-8\">\n+                        {!email && (\n+                            <div className=\"space-y-6\">\n                                 <div className=\"rounded-md shadow-sm -space-y-px\">\n-                                    {isRegistering && !isBrailleComplete && (\n-                                        <div>\n-                                            <label htmlFor=\"username\" className=\"sr-only\">\n-                                                Nombre de usuario\n-                                            </label>\n-                                            <input\n-                                                id=\"username\"\n-                                                name=\"username\"\n-                                                type=\"text\"\n-                                                required\n-                                                value={username}\n-                                                onChange={(e) => setUsername(e.target.value)}\n-                                                className=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm\"\n-                                                placeholder=\"Nombre de usuario\"\n-                                            />\n-                                        </div>\n-                                    )}\n                                     <div>\n-                                        <label htmlFor=\"email\" className=\"sr-only\">\n+                                        <label htmlFor=\"login-email\" className=\"sr-only\">\n                                             Correo electr√≥nico\n                                         </label>\n                                         <input\n-                                            id=\"email\"\n+                                            id=\"login-email\"\n                                             name=\"email\"\n                                             type=\"email\"\n                                             required\n                                             value={email}\n                                             onChange={(e) => setEmail(e.target.value)}\n-                                            className={`appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 ${\n-                                                isRegistering && !isBrailleComplete ? 'rounded-none' : 'rounded-t-md'\n-                                            } focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm`}\n+                                            className=\"appearance-none rounded relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm\"\n                                             placeholder=\"Correo electr√≥nico\"\n+                                            autoFocus\n                                         />\n                                     </div>\n-                                    {(!isRegistering || !isBrailleComplete) && (\n+                                </div>\n+                            </div>\n+                        )}\n+                    </div>\n+                )}\n+                {!showVoiceLogin && !showFaceLogin ? (\n+                    isRegistering && showBrailleInput ? (\n+                        <div className=\"mt-8 braille-container\">\n+                            <h3 className=\"text-lg font-medium text-center text-blue-800 mb-4\">\n+                                Creaci√≥n de contrase√±a mediante Braille\n+                            </h3>\n+                            <p className=\"text-sm text-center text-gray-600 mb-4\">\n+                                Indica verbalmente los puntos del patr√≥n braille para crear tu contrase√±a\n+                            </p>\n+                            <BraillePassword onPasswordComplete={handleBraillePasswordComplete} />\n+                        </div>\n+                    ) : !isRegistering && showBrailleInput ? (\n+                        <div className=\"mt-8 braille-container\">\n+                            <h3 className=\"text-lg font-medium text-center text-blue-800 mb-4\">\n+                                Creaci√≥n de contrase√±a mediante Braille\n+                            </h3>\n+                            <p className=\"text-sm text-center text-gray-600 mb-4\">\n+                                Indica verbalmente los puntos del patr√≥n braille para crear tu contrase√±a\n+                            </p>\n+                            <BraillePasswordLogin onPasswordComplete={handleBrailleLogin} />\n+                        </div>\n+                    ) : (\n+                        // Solo mostrar el formulario de registro/login si NO estamos en login inicial sin email\n+                        // Evitar mostrar el segundo input de correo en la etapa inicial de login accesible\n+                        isRegistering || (isLoggingIn && email) ? (\n+                            <>\n+                                <form className=\"mt-8 space-y-6\" onSubmit={handleSubmit}>\n+                                    <div className=\"rounded-md shadow-sm -space-y-px\">\n+                                        {isRegistering && !isBrailleComplete && (\n+                                            <div>\n+                                                <label htmlFor=\"username\" className=\"sr-only\">\n+                                                    Nombre de usuario\n+                                                </label>\n+                                                <input\n+                                                    id=\"username\"\n+                                                    name=\"username\"\n+                                                    type=\"text\"\n+                                                    required\n+                                                    value={username}\n+                                                    onChange={(e) => setUsername(e.target.value)}\n+                                                    className=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 focus:z-10 sm:text-sm\"\n+                                                    placeholder=\"Nombre de usuario\"\n+                                                />\n+                                            </div>\n+                                        )}\n+                                        {/* SOLO mostrar el input de correo en registro o si ya se confirm√≥ en login */}\n+                                        {(isRegistering || (isLoggingIn && email)) && (\n+                                            <div>\n+                                                <label htmlFor=\"email\" className=\"sr-only\">\n+                                                    Correo electr√≥nico\n+                                                </label>\n+                                                <input\n+                                                    id=\"email\"\n+                                                    name=\"email\"\n+                                                    type=\"email\"\n+                                                    required\n+                                                    value={email}\n+                                                    onChange={(e) => setEmail(e.target.value)}\n+                                                    className=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm\"\n+                                                    placeholder=\"Correo electr√≥nico\"\n+                                                    disabled={isLoggingIn} // evitar edici√≥n en login\n+                                                />\n+                                            </div>\n+                                        )}\n                                         <div>\n                                             <label htmlFor=\"password\" className=\"sr-only\">\n                                                 Contrase√±a\n                                             </label>\n@@ -1238,147 +1581,57 @@\n                                                 type=\"password\"\n                                                 required\n                                                 value={password}\n                                                 onChange={(e) => setPassword(e.target.value)}\n-                                                className=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm\"\n+                                                className=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm\"\n                                                 placeholder=\"Contrase√±a\"\n                                             />\n                                         </div>\n-                                    )}\n-                                </div>\n-\n-                                {transcript && (\n-                                    <div className=\"mt-4 p-4 bg-gray-50 rounded-md\">\n-                                        <p className=\"text-sm text-gray-700\">Texto reconocido: {transcript}</p>\n                                     </div>\n-                                )}\n \n-                                {error && (\n-                                    <div className=\"text-red-500 text-sm text-center\">\n-                                        {error}\n-                                    </div>\n-                                )}\n+                                    {transcript && (\n+                                        <div className=\"mt-4 p-4 bg-gray-50 rounded-md\">\n+                                            <p className=\"text-sm text-gray-700\">Texto reconocido: {transcript}</p>\n+                                        </div>\n+                                    )}\n \n-                                {success && (\n-                                    <div className=\"text-green-500 text-sm text-center\">\n-                                        {success}\n-                                    </div>\n-                                )}\n+                                    {error && (\n+                                        <div className=\"text-red-500 text-sm text-center\">\n+                                            {error}\n+                                        </div>\n+                                    )}\n \n-                                {audioError && (\n-                                    <div className=\"mt-4 p-4 bg-red-50 rounded-md\">\n-                                        <p className=\"text-sm text-red-700\">\n-                                            Error al reproducir audio. Por favor, verifica que los archivos de audio existan en la carpeta correcta.\n-                                        </p>\n-                                    </div>\n-                                )}\n-\n-                                {isListening && (\n-                                    <div className=\"mt-4 p-4 bg-green-50 rounded-md\">\n-                                        <p className=\"text-sm text-green-700\">Escuchando... (se detendr√° autom√°ticamente despu√©s de 1 segundo de silencio)</p>\n-                                    </div>\n-                                )}\n-\n-                                <div>\n-                                    <button\n-                                        type=\"submit\"\n-                                        className=\"group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\n-                                    >\n-                                        {isRegistering ? 'Registrarse' : 'Iniciar sesi√≥n'}\n-                                    </button>\n-                                </div>\n-                            </form>\n-\n-                            {isRegistering && !isBrailleComplete && !showBrailleInput && (\n-                                <div className=\"mt-8\">\n-                                    <div className=\"mb-6 p-4 bg-blue-50 rounded-lg border border-blue-200\">\n-                                        <h3 className=\"text-lg font-semibold text-blue-800 mb-2\">Modo de Registro</h3>\n-                                        <p className=\"text-sm text-blue-700 mb-2\">\n-                                            Por favor, completa los campos del formulario para crear tu cuenta.\n-                                        </p>\n-                                        <p className=\"text-sm text-blue-700\">\n-                                            Tambi√©n puedes usar el asistente de voz para dictar tu informaci√≥n.\n-                                        </p>\n-                                    </div>\n-                                    \n-                                    {/* Bot√≥n expl√≠cito para activar reconocimiento de voz */}\n-                                    {!email && (\n-                                        <div className=\"mb-6\">\n-                                            <button\n-                                                type=\"button\"\n-                                                onClick={() => {\n-                                                    if (!isPlayingRef.current && !isListening) {\n-                                                        handleStartListening();\n-                                                    } else if (isListening) {\n-                                                        handleStopListening();\n-                                                    }\n-                                                }}\n-                                                className={`w-full flex justify-center py-3 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium ${\n-                                                    isListening \n-                                                        ? 'text-white bg-red-600 hover:bg-red-700' \n-                                                        : 'text-white bg-green-600 hover:bg-green-700'\n-                                                } focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500`}\n-                                            >\n-                                                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 mr-2\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n-                                                    <path fillRule=\"evenodd\" d=\"M7 4a3 3 0 016 0v4a3 3 0 11-6 0V4zm4 10.93A7.001 7.001 0 0017 8a1 1 0 10-2 0A5 5 0 015 8a1 1 0 00-2 0 7.001 7.001 0 006 6.93V17H6a1 1 0 100 2h8a1 1 0 100-2h-3v-2.07z\" clipRule=\"evenodd\" />\n-                                                </svg>\n-                                                {isListening ? 'Detener reconocimiento' : 'Hablar para registrarse'}\n-                                            </button>\n-                                            <p className=\"mt-2 text-xs text-center text-gray-500\">\n-                                                Presiona este bot√≥n cuando est√©s listo para hablar y proporcionar tus datos\n-                                            </p>\n+                                    {success && (\n+                                        <div className=\"text-green-500 text-sm text-center\">\n+                                            {success}\n                                         </div>\n                                     )}\n-                                    \n-                                    {email && (\n-                                        <div className=\"mt-3\">\n-                                            <button\n-                                                type=\"button\"\n-                                                onClick={() => setShowBrailleInput(true)}\n-                                                className=\"w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-teal-600 hover:bg-teal-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-teal-500\"\n-                                            >\n-                                                Crear contrase√±a con Braille\n-                                            </button>\n-                                            <p className=\"mt-2 text-xs text-center text-gray-500\">\n-                                                Crea una contrase√±a segura mediante el sistema braille\n+\n+                                    {audioError && (\n+                                        <div className=\"mt-4 p-4 bg-red-50 rounded-md\">\n+                                            <p className=\"text-sm text-red-700\">\n+                                                Error al reproducir audio. Por favor, verifica que los archivos de audio existan en la carpeta correcta.\n                                             </p>\n                                         </div>\n                                     )}\n-                                </div>\n-                            )}\n \n-                            {!isRegistering && (\n-                                <div className=\"mt-6\">\n-                                    <div className=\"relative\">\n-                                        <div className=\"absolute inset-0 flex items-center\">\n-                                            <div className=\"w-full border-t border-gray-300\"></div>\n+                                    {isListening && (\n+                                        <div className=\"mt-4 p-4 bg-green-50 rounded-md\">\n+                                            <p className=\"text-sm text-green-700\">Escuchando... (se detendr√° autom√°ticamente despu√©s de 1 segundo de silencio)</p>\n                                         </div>\n-                                        <div className=\"relative flex justify-center text-sm\">\n-                                            <span className=\"px-2 bg-white text-gray-500\">Otras opciones</span>\n-                                        </div>\n-                                    </div>\n+                                    )}\n \n-                                    <div className=\"mt-6 grid grid-cols-2 gap-3\">\n+                                    <div>\n                                         <button\n-                                            onClick={() => {\n-                                                updateAppState('voiceLogin');\n-                                            }}\n-                                            className=\"w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-purple-600 hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500\"\n+                                            type=\"submit\"\n+                                            className=\"group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\n                                         >\n-                                            Voz\n+                                            {isRegistering ? 'Registrarse' : 'Iniciar sesi√≥n'}\n                                         </button>\n-                                        <button\n-                                            onClick={() => {\n-                                                updateAppState('faceLogin');\n-                                            }}\n-                                            className=\"w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\n-                                        >\n-                                            Facial\n-                                        </button>\n                                     </div>\n-                                </div>\n-                            )}\n-                        </>\n+                                </form>\n+                            </>\n+                        ) : null\n                     )\n                 ) : showFaceLogin ? (\n                     <div className=\"mt-8\">\n                         <FaceLogin onLoginSuccess={handleVoiceLoginSuccess} />\n@@ -1394,9 +1647,21 @@\n                         </div>\n                     </div>\n                 ) : (\n                     <div className=\"mt-8\">\n-                        <VoiceLogin onLoginSuccess={handleVoiceLoginSuccess} />\n+                        <h3 className=\"text-lg font-semibold mb-2 text-center\">Reconocimiento de voz para inicio de sesi√≥n</h3>\n+                        <VoiceLoginRecorder\n+                            autoStart={true} // Forzar autoStart\n+                            login={login}\n+                            navigate={navigate}\n+                            onRecordingComplete={blob => {\n+                                setAudioBlob(blob);\n+                                // Aqu√≠ puedes llamar a tu funci√≥n de login con el blob\n+                                // handleVoiceLogin(blob);\n+                            }}\n+                            onStartRecording={() => setIsRecording(true)}\n+                            onStopRecording={() => setIsRecording(false)}\n+                        />\n                         <div className=\"mt-4 text-center\">\n                             <button\n                                 onClick={() => {\n                                     updateAppState('backToMain');\n@@ -1425,13 +1690,16 @@\n                         <div className=\"text-center mb-4\">\n                             <p className=\"text-sm text-gray-600\">Grabaci√≥n de voz (opcional)</p>\n                             <p className=\"text-xs text-gray-500\">Te permitir√° iniciar sesi√≥n usando tu voz en el futuro</p>\n                         </div>\n-                        <VoiceRecorder\n-                            onRecordingComplete={handleVoiceRecordingComplete}\n-                            onStartRecording={handleStartRecording}\n-                            onStopRecording={handleStopRecording}\n-                        />\n+                        {showVoiceRecorder && (\n+                            <VoiceRecorder\n+                                onRecordingComplete={handleVoiceRecordingComplete}\n+                                onStartRecording={handleStartRecording}\n+                                onStopRecording={handleStopRecording}\n+                                autoStart={true} // Activar grabaci√≥n autom√°ticamente\n+                            />\n+                        )}\n                         \n                         <div className=\"mt-6\">\n                             <div className=\"text-center mb-4\">\n                                 <p className=\"text-sm text-gray-600\">Registro facial (opcional)</p>\n"
                }
            ],
            "date": 1744949695512,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../context/AuthContext';\nimport {playBeep, playPredefinedMessage } from '../services/audioService';\nimport { config } from '../config';\nimport VoiceRecorder from '../components/VoiceRecorder';\nimport VoiceLogin from '../components/VoiceLogin';\nimport FaceRecorder from '../components/FaceRecorder';\nimport FaceLogin from '../components/FaceLogin';\nimport BraillePassword from '../components/BraillePassword'\nimport { useLocation } from 'react-router-dom';;\n\n// Claves de los mensajes de audio predefinidos\nconst AUDIO_MESSAGES = {\n    welcome: \"welcome\",\n    askRegistration: \"askRegistration\",\n    registered: \"registered\",\n    notRegistered: \"notRegistered\",\n    listening: \"listening\",\n    notUnderstood: \"notUnderstood\",\n    goodbye: \"goodbye\",\n    askLoginOrRegister: \"askLoginOrRegister\",\n    login: \"login\",\n    register: \"register\",\n    voiceLogin: \"voiceLogin\",\n    faceLogin: \"faceLogin\",\n    loginSuccess: \"loginSuccess\",\n    loginError: \"loginError\",\n    registerInstructions: \"registerInstructions\",\n    registerVoiceGuide: \"registerVoiceGuide\",\n    askUserName: \"askUserName\",\n    userNameConfirmed: \"userNameConfirmed\",\n    emailConfirmed: \"emailConfirmed\",\n    askPassword: \"askPassword\",\n    passwordConfirmed: \"passwordPrompt\", // Apuntando al audio correcto que s√≠ existe\n    braillePasswordSaved: \"braillePasswordSaved\",\n    \n    // Nuevos mensajes para la grabaci√≥n de voz biom√©trica\n    voiceRecordingPrompt: \"voiceRecordingPrompt\",\n    voiceRecordingSample: \"voiceRecordingSample\", \n    voiceRecordingComplete: \"voiceRecordingComplete\",\n    \n    // Nuevo mensaje para la captura facial\n    faceCapture: \"faceCapture\"\n};\n\n\n// Clave para almacenar el √∫ltimo mensaje en localStorage\nconst LAST_MESSAGE_KEY = 'accessibleLogin_lastAudioMessage';\n\nconst AccessibleLogin = () => {\n    console.log('Renderizando AccessibleLogin');\n    \n       // Estados para control de UI\n    const [isListening, setIsListening] = useState(false);\n    const [transcript, setTranscript] = useState('');\n    const [error, setError] = useState('');\n    const [success, setSuccess] = useState('');\n    const [isInitialized, setIsInitialized] = useState(false);\n    const [audioError, setAudioError] = useState(false);\n    const [silenceTimer, setSilenceTimer] = useState(null);\n    \n    // Estados para control de flujo\n    const [isRegistering, setIsRegistering] = useState(false);\n    const [showVoiceLogin, setShowVoiceLogin] = useState(false);\n    const [showFaceLogin, setShowFaceLogin] = useState(false);\n    const [showBrailleInput, setShowBrailleInput] = useState(false);\n    const [isBrailleComplete, setIsBrailleComplete] = useState(false);\n    \n    // Estados para datos de formulario\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [username, setUsername] = useState('');\n    \n    // Estados para grabaci√≥n de voz y captura de imagen\n    const [isRecording, setIsRecording] = useState(false);\n    const [audioBlob, setAudioBlob] = useState(null);\n    const [isCapturing, setIsCapturing] = useState(false);\n    const [photoBlob, setPhotoBlob] = useState(null);\n\n    // NUEVO: Estado para controlar el paso actual del registro\n    const [registrationStep, setRegistrationStep] = useState(null); // null, 'braille', 'voice', 'face', 'complete'\n    const [voiceRegistrationComplete, setVoiceRegistrationComplete] = useState(false);\n    const [playingAudio, setPlayingAudio] = useState(false);\n\n    // Referencias\n    const audioQueueRef = useRef([]);\n    const isPlayingRef = useRef(false);\n    const hasPlayedWelcomeRef = useRef(false);\n    const finalTranscriptRef = useRef('');\n    const lastMessageRef = useRef('');\n    const audioContextRef = useRef(null);\n    const voiceRegisteredRef = useRef(false); // Para evitar activaci√≥n duplicada\n    \n    const navigate = useNavigate();\n    const { login } = useAuth();\n\n    // Dentro de los estados en la parte superior del componente AccessibleLogin\n    const [isLoggingIn, setIsLoggingIn] = useState(false);\n\n    // Funci√≥n para interrumpir la reproducci√≥n de audio\n    const stopCurrentAudio = () => {\n        if (isPlayingRef.current) {\n            // Limpiar la cola de audio\n            audioQueueRef.current = [];\n            isPlayingRef.current = false;\n            \n            // Crear un contexto de audio temporal y desconectarlo para detener cualquier sonido\n            const tempContext = new (window.AudioContext || window.webkitAudioContext)();\n            tempContext.close();\n        }\n    };\n\n    // Funci√≥n para guardar el √∫ltimo mensaje reproducido\n    const saveLastMessage = (messageKey) => {\n        lastMessageRef.current = messageKey;\n        try {\n            localStorage.setItem(LAST_MESSAGE_KEY, messageKey);\n        } catch (e) {\n            console.error('Error al guardar mensaje en localStorage:', e);\n        }\n    };\n\n    // Funci√≥n para reproducir mensajes de audio en cola\n    const playNextInQueue = async () => {\n        if (audioQueueRef.current.length === 0 || isPlayingRef.current) {\n            return;\n        }\n\n        isPlayingRef.current = true;\n        const nextMessage = audioQueueRef.current.shift();\n\n        try {\n            // Guardar el mensaje actual como el √∫ltimo reproducido\n            saveLastMessage(nextMessage);\n            await playPredefinedMessage(nextMessage);\n        } catch (error) {\n            console.error(`Error al reproducir mensaje ${nextMessage}:`, error);\n            setAudioError(true);\n        } finally {\n            isPlayingRef.current = false;\n            // Reproducir el siguiente mensaje en la cola\n            setTimeout(playNextInQueue, 100);\n        }\n    };\n\n    // Funci√≥n para a√±adir un mensaje a la cola de reproducci√≥n\n    const queueAudioMessage = (messageKey) => {\n        audioQueueRef.current.push(messageKey);\n        playNextInQueue();\n    };\n\n    // Funci√≥n para repetir el √∫ltimo mensaje\n    const repeatLastMessage = () => {\n        let messageToRepeat = lastMessageRef.current;\n        \n        // Si no hay mensaje en la referencia, intentar obtenerlo del localStorage\n        if (!messageToRepeat) {\n            try {\n                messageToRepeat = localStorage.getItem(LAST_MESSAGE_KEY);\n            } catch (e) {\n                console.error('Error al obtener mensaje de localStorage:', e);\n            }\n        }\n        \n        // Si se encontr√≥ un mensaje para repetir, reproducirlo\n        if (messageToRepeat) {\n            queueAudioMessage(messageToRepeat);\n        }\n    };\n\n    // Funci√≥n para manejar la interacci√≥n del usuario\n    const handleUserInteraction = () => {\n        if (!isInitialized && !hasPlayedWelcomeRef.current) {\n            setIsInitialized(true);\n            hasPlayedWelcomeRef.current = true;\n            // Reproducir mensaje de bienvenida y luego preguntar si quiere iniciar sesi√≥n o registrarse\n            queueAudioMessage(AUDIO_MESSAGES.welcome);\n            setTimeout(() => {\n                queueAudioMessage(AUDIO_MESSAGES.askLoginOrRegister);\n            }, 2000); // Esperar 2 segundos despu√©s del mensaje de bienvenida\n        }\n    };\n\n    // A√±adir event listeners para cualquier interacci√≥n\n    useEffect(() => {\n        const events = ['click', 'touchstart'];\n        events.forEach(event => {\n            window.addEventListener(event, handleUserInteraction, { once: true });\n        });\n\n        // A√±adir listener para las teclas espacio y enter\n        const handleKeyPress = (e) => {\n            if (e.code === 'Space') {\n                e.preventDefault();\n                if (isPlayingRef.current) {\n                    // Si est√° reproduciendo audio, detenerlo\n                    stopCurrentAudio();\n                } else if (!isListening && !showBrailleInput) {\n                    // Solo iniciar reconocimiento si no est√° el braille activo\n                    handleStartListening();\n                }\n            } else if (e.code === 'Enter') {\n                e.preventDefault();\n                // Repetir el √∫ltimo mensaje\n                repeatLastMessage();\n            }\n        };\n\n        window.addEventListener('keydown', handleKeyPress);\n\n        return () => {\n            events.forEach(event => {\n                window.removeEventListener(event, handleUserInteraction);\n            });\n            window.removeEventListener('keydown', handleKeyPress);\n        };\n    }, [isListening, showBrailleInput]);\n\n    const handleStartListening = async () => {\n        console.log('üéôÔ∏è Iniciando reconocimiento de voz...');\n        \n        // No iniciar reconocimiento si se est√° mostrando la interfaz de braille\n        if (showBrailleInput) {\n            console.log('‚ö†Ô∏è No se puede iniciar el reconocimiento mientras est√° activa la interfaz de braille');\n            return;\n        }\n        \n        // Verificar si hay audio reproduci√©ndose antes de iniciar el reconocimiento\n        if (isPlayingRef.current) {\n            console.log('‚ö†Ô∏è No se puede iniciar el reconocimiento de voz mientras se reproduce un audio');\n            return;\n        }\n        \n        setIsListening(true);\n        setError('');\n        setTranscript('');\n        finalTranscriptRef.current = '';\n        \n        // Si estamos en modo registro, mostrar un mensaje visual de ayuda\n        if (isRegistering) {\n            // Mostrar un mensaje visual de ayuda\n            setTranscript('Esperando que digas tu informaci√≥n...');\n            \n        }\n        \n        try {\n            const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\n            recognition.lang = 'es-ES';\n            recognition.continuous = false;\n            recognition.interimResults = true;\n            recognition.maxAlternatives = 5; // Obtener m√°s alternativas\n            \n            // Log de configuraci√≥n\n            console.log('Configuraci√≥n del reconocimiento:', {\n                lang: recognition.lang,\n                continuous: recognition.continuous,\n                interimResults: recognition.interimResults,\n                maxAlternatives: recognition.maxAlternatives\n            });\n\n            // Variable para rastrear la actividad de voz\n            let silenceDetectionInterval = null;\n            let lastSpeechTime = Date.now();\n            let hasDetectedSpeech = false;\n            let currentTranscript = '';\n            \n            // Bandera para rastrear si ya se proces√≥ el texto\n            let hasProcessedSpeech = false;\n\n            // Funci√≥n para procesar el texto y evitar m√∫ltiples procesamientos\n            const processSpeechText = (text) => {\n                if (hasProcessedSpeech || !text) return;\n                \n                console.log('üîÑ Procesando texto final:', text);\n                finalTranscriptRef.current = text;\n                processUserSpeech(text);\n                hasProcessedSpeech = true;\n            };\n\n            // Funci√≥n para detectar silencio\n            const checkForSilence = () => {\n                const silenceTime = Date.now() - lastSpeechTime;\n                \n                // Log para depuraci√≥n de silencio\n                if (hasDetectedSpeech && silenceTime > 500) {\n                    console.log(`Silencio detectado: ${silenceTime}ms`);\n                }\n                \n                if (silenceTime >= 1000 && hasDetectedSpeech && !hasProcessedSpeech) {\n                    console.log('üîä Silencio detectado despu√©s de 1 segundo. Finalizando reconocimiento.');\n                    console.log('üî§ Texto final reconocido:', currentTranscript);\n                    \n                    clearInterval(silenceDetectionInterval);\n                    \n                    // Procesar inmediatamente lo que dijo el usuario\n                    processSpeechText(currentTranscript);\n                    \n                    // Detener el reconocimiento\n                    try {\n                        recognition.stop();\n                        console.log('Reconocimiento detenido correctamente');\n                    } catch (e) {\n                        console.error('Error al detener el reconocimiento:', e);\n                    }\n                }\n            };\n\n            // Iniciar un intervalo para verificar el silencio cada 100ms\n            silenceDetectionInterval = setInterval(checkForSilence, 100);\n\n            recognition.onstart = () => {\n                console.log('üéôÔ∏è Reconocimiento de voz iniciado');\n            };\n\n            recognition.onresult = (event) => {\n                console.log('Resultado recibido:', event);\n                const current = event.resultIndex;\n                const result = event.results[current];\n                currentTranscript = result[0].transcript.toLowerCase();\n                \n                // Mostrar todas las alternativas si est√°n disponibles\n                if (result.length > 1) {\n                    console.log('Alternativas disponibles:');\n                    for (let i = 0; i < result.length; i++) {\n                        console.log(`  ${i+1}: ${result[i].transcript} (confianza: ${result[i].confidence})`);\n                    }\n                }\n                \n                // Actualizar el transcript en tiempo real para mostrar lo que se est√° reconociendo\n                setTranscript(currentTranscript);\n                console.log('Reconocido:', currentTranscript);\n                lastSpeechTime = Date.now();\n                hasDetectedSpeech = true;\n            };\n\n            recognition.onend = () => {\n                console.log('üõë Reconocimiento finalizado');\n                clearInterval(silenceDetectionInterval);\n                setIsListening(false);\n                \n                // Si no se ha procesado el texto y tenemos algo que procesar, hacerlo ahora\n                if (!hasProcessedSpeech && currentTranscript) {\n                    console.log('‚ö†Ô∏è Reconocimiento finalizado sin detectar silencio. Procesando √∫ltimo texto conocido:', currentTranscript);\n                    processSpeechText(currentTranscript);\n                }\n            };\n\n            recognition.onerror = (event) => {\n                console.log('‚ùå Error en reconocimiento:', event.error);\n                clearInterval(silenceDetectionInterval);\n                if (event.error === 'no-speech') {\n                    setError('No se detect√≥ voz. Por favor, intenta hablar de nuevo.');\n                } else {\n                    setError(`Error en el reconocimiento de voz: ${event.error}`);\n                }\n                setIsListening(false);\n            };\n\n            recognition.onnomatch = () => {\n                console.log('‚ùì No se encontr√≥ coincidencia para el habla');\n            };\n\n            recognition.start();\n            console.log('Reconocimiento de voz iniciado correctamente');\n        } catch (error) {\n            console.error('‚ùå Error al iniciar reconocimiento de voz:', error);\n            setError('Tu navegador no soporta el reconocimiento de voz');\n            setIsListening(false);\n        }\n    };\n\n    // A√±adir un efecto para monitorear cambios en los estados principales\n    useEffect(() => {\n        console.log('üîÑ CAMBIO DE ESTADO DETECTADO:');\n        console.log('isRegistering:', isRegistering);\n        console.log('showVoiceLogin:', showVoiceLogin);\n        console.log('showFaceLogin:', showFaceLogin);\n    }, [isRegistering, showVoiceLogin, showFaceLogin]);\n\n    // Funci√≥n para actualizar estados y garantizar re-renderizado\n    const updateAppState = (action) => {\n        console.log('‚öôÔ∏è Actualizando estado:', action);\n        \n        // Guardar estado anterior para comparar\n        const prevState = {\n            isRegistering,\n            showVoiceLogin,\n            showFaceLogin,\n            isLoggingIn\n        };\n        \n        switch (action) {\n            case 'login':\n                setIsRegistering(false);\n                setShowVoiceLogin(false);\n                setShowFaceLogin(false);\n                setIsLoggingIn(true);\n                // Reproducir audio despu√©s de un breve retraso para asegurar que el DOM est√© actualizado\n                setTimeout(() => {\n                    console.log('Reproduciendo audio de login...');\n                    queueAudioMessage(AUDIO_MESSAGES.login);\n                }, 200);\n                break;\n            case 'register':\n                console.log('üîî ACTIVANDO MODO REGISTRO');\n                setIsRegistering(true);\n                setShowVoiceLogin(false);\n                setShowFaceLogin(false);\n                setIsLoggingIn(false);\n                \n                // Reproducir audio de registro de forma m√°s fiable\n                setTimeout(() => {\n                    console.log('Reproduciendo secuencia de audio para registro...');\n                    try {\n                        // Detener cualquier audio previo\n                        stopCurrentAudio();\n                        \n                        // Reproducir audio de registro una sola vez\n                        setTimeout(() => {\n                            console.log('Reproduciendo audio register...');\n                            queueAudioMessage(AUDIO_MESSAGES.register);\n                            \n                            // Esperar a que termine el primer audio y reproducir instrucciones claras\n                            setTimeout(() => {\n                                console.log('Reproduciendo instrucciones detalladas de registro...');\n                                \n                                // Usar archivos de audio existentes en lugar de s√≠ntesis de voz\n                                console.log('Reproduciendo gu√≠a de voz para registro...');\n                                queueAudioMessage(AUDIO_MESSAGES.registerVoiceGuide);\n                                \n                                // Programar reproducci√≥n de instrucciones adicionales para solicitar el nombre de usuario\n                                setTimeout(() => {\n                                    console.log('Solicitando nombre de usuario...');\n                                    queueAudioMessage(AUDIO_MESSAGES.askUserName);\n                                    \n                                    // A√±adir un indicador visual despu√©s de las instrucciones\n                                    setTimeout(() => {\n                                        const formHeader = document.createElement('div');\n                                        formHeader.className = 'mt-4 p-3 bg-blue-100 rounded-md text-center';\n                                        formHeader.innerHTML = `\n                                            <p class=\"text-blue-800 font-medium\">Ingrese los datos para su registro</p>\n                                            <p class=\"text-blue-600 text-sm mt-1\">Complete los campos en el formulario</p>\n                                            <p class=\"text-blue-600 text-sm mt-1 font-bold\">Presione el bot√≥n \"Hablar para registrarse\" cuando est√© listo</p>\n                                        `;\n                                        \n                                        // Insertar al principio del formulario\n                                        const form = document.querySelector('form');\n                                        if (form && form.firstChild) {\n                                            form.insertBefore(formHeader, form.firstChild);\n                                        }\n                                        \n                                        // Ya no iniciaremos autom√°ticamente el reconocimiento de voz\n                                        // El usuario debe presionar el bot√≥n expl√≠cito para activarlo\n                                    }, 1000);\n                                }, 2000);\n                            }, 2000);\n                        }, 300);\n                    } catch (error) {\n                        console.error('Error al reproducir audio de registro:', error);\n                    }\n                }, 500);\n                \n                // Forzar refresco de la UI despu√©s de un breve retraso\n                setTimeout(() => {\n                    console.log('Estado verificado despu√©s de cambio:', {\n                        isRegistering,\n                        showVoiceLogin,\n                        showFaceLogin,\n                        isLoggingIn\n                    });\n                }, 300);\n                break;\n            case 'voiceLogin':\n                setIsRegistering(false);\n                setShowVoiceLogin(true);\n                setShowFaceLogin(false);\n                setIsLoggingIn(false);\n                setTimeout(() => {\n                    queueAudioMessage(AUDIO_MESSAGES.voiceLogin);\n                }, 200);\n                break;\n            case 'faceLogin':\n                setIsRegistering(false);\n                setShowVoiceLogin(false);\n                setShowFaceLogin(true);\n                setIsLoggingIn(false);\n                setTimeout(() => {\n                    queueAudioMessage(AUDIO_MESSAGES.faceLogin);\n                }, 200);\n                break;\n            case 'backToMain':\n                setIsRegistering(false);\n                setShowVoiceLogin(false);\n                setShowFaceLogin(false);\n                setIsLoggingIn(false);\n                setTimeout(() => {\n                    queueAudioMessage(AUDIO_MESSAGES.askLoginOrRegister);\n                }, 200);\n                break;\n            default:\n                console.log('Acci√≥n desconocida:', action);\n                return; // No hay cambio de estado\n        }\n        \n        // Programar verificaci√≥n de cambio de estado\n        setTimeout(() => {\n            const newState = {\n                isRegistering,\n                showVoiceLogin,\n                showFaceLogin,\n                isLoggingIn\n            };\n            \n            // Comparar estados para verificar cambio\n            if (JSON.stringify(prevState) === JSON.stringify(newState)) {\n                console.warn('‚ö†Ô∏è ALERTA: Estado no cambi√≥ despu√©s de acci√≥n:', action);\n                console.log('Estado antes:', prevState);\n                console.log('Estado despu√©s:', newState);\n                \n                // Forzar actualizaci√≥n expl√≠cita\n                switch (action) {\n                    case 'register':\n                        console.log('üîÑ Forzando cambio a modo registro');\n                        setIsRegistering(prev => !prev); // Toggle para forzar cambio\n                        setTimeout(() => {\n                            setIsRegistering(true);\n                            // NO reproducir audio nuevamente despu√©s del cambio forzado\n                            // Se elimin√≥ la siguiente secci√≥n para evitar duplicaci√≥n:\n                            // setTimeout(() => {\n                            //     queueAudioMessage(AUDIO_MESSAGES.register);\n                            // }, 300);\n                        }, 50); // Restaurar valor deseado\n                        break;\n                    case 'voiceLogin':\n                        setShowVoiceLogin(prev => !prev);\n                        setTimeout(() => {\n                            setShowVoiceLogin(true);\n                            setTimeout(() => queueAudioMessage(AUDIO_MESSAGES.voiceLogin), 300);\n                        }, 50);\n                        break;\n                    case 'faceLogin':\n                        setShowFaceLogin(prev => !prev);\n                        setTimeout(() => {\n                            setShowFaceLogin(true);\n                            setTimeout(() => queueAudioMessage(AUDIO_MESSAGES.faceLogin), 300);\n                        }, 50);\n                        break;\n                    case 'login':\n                        setIsLoggingIn(prev => !prev);\n                        setTimeout(() => {\n                            setIsLoggingIn(true);\n                            setTimeout(() => queueAudioMessage(AUDIO_MESSAGES.login), 300);\n                        }, 50);\n                        break;\n                    default:\n                        // No se requiere acci√≥n especial\n                        break;\n                }\n            } else {\n                console.log('‚úÖ Estado cambiado correctamente a:', newState);\n            }\n        }, 200);\n    };\n\n    // Funci√≥n para procesar el texto reconocido\n    const processUserSpeech = (text) => {\n        console.log('===================== PROCESANDO TEXTO =====================');\n        console.log('Texto recibido:', text);\n        console.log('Estado actual - isRegistering:', isRegistering);\n        console.log('Estado actual - showVoiceLogin:', showVoiceLogin);\n        console.log('Estado actual - showFaceLogin:', showFaceLogin);\n        \n        if (!text) {\n            console.log('‚ö†Ô∏è No hay texto para procesar');\n            return;\n        }\n        \n        // Normalizar el texto para facilitar la detecci√≥n de comandos\n        const normalizedText = text.toLowerCase().trim();\n        \n        // Funci√≥n para verificar si el texto contiene alguna de las palabras clave\n        const containsAny = (keywords) => {\n            return keywords.some(keyword => normalizedText.includes(keyword));\n        };\n        \n        // Si estamos en modo registro, verificar si el usuario est√° proporcionando datos\n        if (isRegistering) {\n            console.log('üß© Procesando input durante registro');\n            \n            // Patrones para reconocer datos de registro\n            const usernamePattern1 = /mi nombre (de usuario )?es\\s+([a-zA-Z0-9√°√©√≠√≥√∫√Å√â√ç√ì√ö√º√ú√±√ë]+)/i;\n            const usernamePattern2 = /([a-zA-Z0-9√°√©√≠√≥√∫√Å√â√ç√ì√ö√º√ú√±√ë]+)\\s+es mi nombre/i;\n            const usernamePattern3 = /me llamo\\s+([a-zA-Z0-9√°√©√≠√≥√∫√Å√â√ç√ì√ö√º√ú√±√ë]+)/i;\n            const emailPattern3 = /mi (correo|email|mail|e-mail|direcci√≥n)( electr√≥nico)? es ([a-zA-Z0-9]+)( guion bajo| gui√≥n bajo| underscore)([a-zA-Z0-9]+) arroba ([a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})/i;\n            \n            // Verificar si est√° diciendo su nombre de usuario\n            let match;\n            if ((match = normalizedText.match(usernamePattern1))) {\n                const extractedUsername = match[2];\n                console.log('‚úÖ Nombre de usuario reconocido (patr√≥n 1):', extractedUsername);\n                setUsername(extractedUsername);\n                queueAudioMessage(AUDIO_MESSAGES.userNameConfirmed);\n                setTimeout(() => {\n                    playWithFallback(\"askEmail\", \"Por favor, dime tu correo electr√≥nico.\");\n                }, 2000);\n                return;\n            } else if ((match = normalizedText.match(usernamePattern2))) {\n                const extractedUsername = match[1];\n                console.log('‚úÖ Nombre de usuario reconocido (patr√≥n 2):', extractedUsername);\n                setUsername(extractedUsername);\n                queueAudioMessage(AUDIO_MESSAGES.userNameConfirmed);\n                setTimeout(() => {\n                    playWithFallback(\"askEmail\", \"Por favor, dime tu correo electr√≥nico.\");\n                }, 2000);\n                return;\n            } else if ((match = normalizedText.match(usernamePattern3))) {\n                const extractedUsername = match[1];\n                console.log('‚úÖ Nombre de usuario reconocido (patr√≥n 3):', extractedUsername);\n                setUsername(extractedUsername);\n                queueAudioMessage(AUDIO_MESSAGES.userNameConfirmed);\n                setTimeout(() => {\n                    playWithFallback(\"askEmail\", \"Por favor, dime tu correo electr√≥nico.\");\n                }, 2000);\n                return;\n            }\n            \n            // Si el texto es muy corto y est√° en modo de registro, probablemente sea solo el nombre\n            if (normalizedText.length > 2 && normalizedText.length < 20 && !normalizedText.includes(' ')) {\n                console.log('‚úÖ Posible nombre de usuario directo:', normalizedText);\n                setUsername(normalizedText);\n                queueAudioMessage(AUDIO_MESSAGES.userNameConfirmed);\n                setTimeout(() => {\n                    playWithFallback(\"askEmail\", \"Por favor, dime tu correo electr√≥nico.\");\n                }, 2000);\n                return;\n            }\n            const letterToCharMap = {\n                a: 'a', be: 'b', ce: 'c', de: 'd', e: 'e', efe: 'f', ge: 'g',\n                hache: 'h', i: 'i', jota: 'j', ka: 'k', ele: 'l', eme: 'm', ene: 'n',\n                e√±e: '√±', o: 'o', pe: 'p', cu: 'q', ere: 'r', ese: 's', te: 't',\n                u: 'u', ve: 'v', uve: 'v', 'doble ve': 'w', equis: 'x', ye: 'y', zeta: 'z',\n                'i griega': 'y', cero: '0', uno: '1', dos: '2', tres: '3', cuatro: '4',\n                cinco: '5', seis: '6', siete: '7', ocho: '8', nueve: '9',\n              };\n              \n              const specialMap = {\n                'guion bajo': '_', 'gui√≥n bajo': '_', underscore: '_',\n                'guion medio': '-', 'gui√≥n medio': '-', menos: '-',\n                punto: '.', dot: '.', arroba: '@',\n              };\n              \n              function normalizeSpokenEmail(text) {\n                let processed = text.toLowerCase();\n              \n                for (const [key, val] of Object.entries(specialMap)) {\n                  processed = processed.replaceAll(key, ` ${val} `);\n                }\n              \n                const words = processed.split(/\\s+/).filter(Boolean);\n                const emailParts = words.map(w => letterToCharMap[w] || w).join('');\n                return emailParts;\n              }\n              \n              function confirmEmail(email) {\n                setEmail(email);\n                queueAudioMessage(AUDIO_MESSAGES.emailConfirmed);\n                queueAudioMessage(AUDIO_MESSAGES.passwordConfirmed);\n              \n                let verbalEmail = '';\n                for (const char of email) {\n                  verbalEmail += {\n                    '@': ' arroba ',\n                    '.': ' punto ',\n                    '_': ' guion bajo ',\n                    '-': ' guion medio ',\n                  }[char] || char + ' ';\n                }\n              \n                if (isListening) handleStopListening();\n                setShowBrailleInput(true);\n                console.log('‚úÖ Correo confirmado y se activa interfaz de braille:', email);\n              }\n              \n              function handleEmailRecognition(normalizedText) {\n                const spokenText = normalizeSpokenEmail(normalizedText);\n                const emailRegex = /([a-zA-Z0-9._-]+)@([a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})/;\n                const match = spokenText.match(emailRegex);\n              \n                if (match) {\n                  const email = `${match[1]}@${match[2]}`;\n                  if (/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)) {\n                    confirmEmail(email);\n                  } else {\n                    console.warn('‚ùå Email inv√°lido despu√©s de procesar:', email);\n                  }\n                } else {\n                  console.log('‚ö†Ô∏è Texto no contiene email reconocido:', spokenText);\n                }\n              }\n              handleEmailRecognition(normalizedText);\n        }\n        \n        // Procesar comandos de navegaci√≥n general\n        // Palabras clave para cada acci√≥n\n        const registerKeywords = ['registrar', 'registro', 'crear cuenta', 'nueva cuenta', 'inscribirme', \n                                'registrarme', 'inscribir', 'registra', 'registrame', 'inscribirte'];\n        const loginKeywords = ['iniciar', 'login', 'entrar', 'sesi√≥n', 'iniciar sesi√≥n', 'entrar sesi√≥n', \n                               'inicia', 'ingreso', 'ingresar', 'acceder', 'acceso'];\n        const voiceKeywords = ['voz', 'reconocimiento de voz', 'hablar', 'por voz'];\n        const faceKeywords = ['cara', 'facial', 'reconocimiento facial', 'rostro', 'mi cara', 'fotograf√≠a'];\n        const cancelKeywords = ['cancelar', 'volver', 'regresar', 'atr√°s', 'salir', 'cancela'];\n        \n        console.log('Analizando comando en texto normalizado:', normalizedText);\n        \n        // Procesar comandos de navegaci√≥n general primero, independientemente del estado actual\n        if (containsAny(loginKeywords)) {\n            console.log('‚úÖ Comando reconocido: iniciar sesi√≥n');\n            updateAppState('login');\n            return;\n        } \n        \n        if (containsAny(registerKeywords)) {\n            console.log('‚úÖ Comando reconocido: registrarse');\n            console.log('Palabras clave detectadas: registrar, registro, crear cuenta, etc.');\n            updateAppState('register');\n            return;\n        } \n        \n        if (containsAny(voiceKeywords)) {\n            console.log('‚úÖ Comando reconocido: login por voz');\n            updateAppState('voiceLogin');\n            return;\n        } \n        \n        if (containsAny(faceKeywords)) {\n            console.log('‚úÖ Comando reconocido: login facial');\n            updateAppState('faceLogin');\n            return;\n        }\n\n        // Si llegamos aqu√≠, no fue un comando de navegaci√≥n principal\n        // Ahora procesamos comandos espec√≠ficos del estado actual\n        if (isRegistering || showVoiceLogin || showFaceLogin) {\n            if (containsAny(cancelKeywords)) {\n                console.log('‚úÖ Comando reconocido: cancelar/volver');\n                updateAppState('backToMain');\n                return;\n            }\n        }\n        \n        // Si llegamos aqu√≠, no se reconoci√≥ ning√∫n comando\n        console.log('‚ùå Comando no reconocido');\n        console.log('Comandos disponibles: \"iniciar sesi√≥n\", \"registrarse\", \"voz\", \"facial\", \"cancelar\"');\n        queueAudioMessage(AUDIO_MESSAGES.notUnderstood);\n    };\n\n    const handleStopListening = () => {\n        setIsListening(false);\n        if (window.SpeechRecognition || window.webkitSpeechRecognition) {\n            try {\n                const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\n                recognition.stop();\n            } catch (error) {\n                console.error('Error al detener reconocimiento:', error);\n            }\n        }\n    };\n\n    // Funciones para grabaci√≥n de voz\n    const handleVoiceRecordingComplete = (audioBlob) => {\n        // Verificar si ya tenemos un audioBlob para evitar procesamiento duplicado\n        if (voiceRegisteredRef.current) {\n            console.log('‚ö†Ô∏è La grabaci√≥n de voz ya fue completada anteriormente, ignorando llamada duplicada');\n            return;\n        }\n\n        // Marcar como registrado para evitar repeticiones\n        voiceRegisteredRef.current = true;\n        setVoiceRegistrationComplete(true);\n        setRegistrationStep('voice');\n        \n        // Guardar el audioBlob\n        setAudioBlob(audioBlob);\n        \n        // Registro de datos sobre el audio grabado\n        const audioBlobSizeKB = (audioBlob.size / 1024).toFixed(2);\n        console.log(\"\\n%c========== DATOS DE GRABACI√ìN DE VOZ ==========\", \"color: #4CAF50; font-weight: bold; font-size: 14px;\");\n        console.log(\"%cTama√±o: %c\" + audioBlobSizeKB + \" KB\", \"color: #2196F3; font-weight: bold\", \"color: #000; font-weight: normal\");\n        console.log(\"%cTipo: %c\" + audioBlob.type, \"color: #2196F3; font-weight: bold\", \"color: #000; font-weight: normal\");\n        console.log(\"%cHora: %c\" + new Date().toLocaleTimeString(), \"color: #2196F3; font-weight: bold\", \"color: #000; font-weight: normal\");\n        console.log(\"%c===============================================\", \"color: #4CAF50; font-weight: bold; font-size: 14px;\");\n\n        // Detener cualquier audio pendiente antes de reproducir el nuevo\n        stopCurrentAudio();\n        \n        // Crear una funci√≥n para activar la c√°mara despu√©s de un tiempo\n        const activateCameraAfterDelay = () => {\n            // Verificar si ya hemos llegado a la etapa de captura facial\n            if (registrationStep !== 'face') {\n                setRegistrationStep('face');\n            }\n            \n            console.log('üé• Intentando activar c√°mara autom√°ticamente...');\n            \n            // Buscar el bot√≥n de c√°mara directamente por su ID (m√°s fiable)\n            const cameraButton = document.getElementById('iniciarCamaraBtn');\n            \n            if (cameraButton) {\n                console.log('‚úÖ Bot√≥n de c√°mara encontrado por ID. Activando captura facial autom√°ticamente...');\n                // Introducir un peque√±o retraso para asegurar que el DOM est√° listo\n                setTimeout(() => {\n                    cameraButton.click();\n                    console.log('‚úÖ Clic en bot√≥n de c√°mara ejecutado');\n                }, 100);\n            } else {\n                console.warn('‚ö†Ô∏è No se encontr√≥ el bot√≥n por ID, intentando con selectores alternativos...');\n                \n                // Fallback: intentar con otros selectores si el ID falla\n                const fallbackSelectors = [\n                    'button.bg-blue-600:not(.record-button)',\n                    'button[data-testid=\"camera-button\"]'\n                ];\n                \n                let buttonFound = false;\n                \n                for (const selector of fallbackSelectors) {\n                    const button = document.querySelector(selector);\n                    if (button) {\n                        console.log(`‚úÖ Bot√≥n de c√°mara encontrado con selector: ${selector}`);\n                        setTimeout(() => {\n                            button.click();\n                            console.log('‚úÖ Clic en bot√≥n de c√°mara ejecutado');\n                        }, 100);\n                        buttonFound = true;\n                        break;\n                    }\n                }\n                \n                // Si a√∫n no lo encontramos, buscar por texto\n                if (!buttonFound) {\n                    const allButtons = document.querySelectorAll('button');\n                    for (const button of allButtons) {\n                        if (button.textContent.trim() === 'Iniciar C√°mara') {\n                            console.log('‚úÖ Bot√≥n de c√°mara encontrado por texto');\n                            setTimeout(() => {\n                                button.click();\n                                console.log('‚úÖ Clic en bot√≥n de c√°mara ejecutado');\n                            }, 100);\n                            buttonFound = true;\n                            break;\n                        }\n                    }\n                }\n                \n                if (!buttonFound) {\n                    console.error('‚ùå No se pudo encontrar el bot√≥n de c√°mara con ning√∫n m√©todo');\n                }\n            }\n        };\n        \n        // Esperar un momento antes de reproducir el mensaje de √©xito\n        setTimeout(() => {\n            // Reproducir mensaje de √©xito\n            setPlayingAudio(true);\n            queueAudioMessage(AUDIO_MESSAGES.loginSuccess);\n            \n            // Esperar a que termine el audio de √©xito antes de reproducir instrucciones para la captura facial\n            setTimeout(() => {\n                // Asegurarse de que no se active el micr√≥fono nuevamente\n                if (registrationStep === 'voice') {\n                    console.log('üîä Reproduciendo mensaje para captura facial...');\n                    \n                    // Instrucciones para la captura facial\n                    playWithFallback('faceCapture', 'Ahora activar√© la c√°mara para capturar tu rostro. Por favor, col√≥cate frente a la c√°mara, mant√©n el rostro estable y con buena iluminaci√≥n. La foto se tomar√° autom√°ticamente cuando se detecte estabilidad.');\n                    \n                    // Esperar a que termine el audio antes de activar la c√°mara\n                    setTimeout(activateCameraAfterDelay, 4000); // Dar tiempo suficiente para que termine el audio\n                }\n            }, 2500); // Esperar 2.5 segundos despu√©s del mensaje de √©xito\n        }, 500);\n    };\n\n    const handleStartRecording = () => {\n        setIsRecording(true);\n    };\n\n    const handleStopRecording = () => {\n        setIsRecording(false);\n    };\n\n    // Funciones para login con voz\n    const handleVoiceLoginSuccess = (token, user) => {\n        console.log('Login con voz exitoso:', token, user);\n        \n        if (!token || !user) {\n            setError('Datos de autenticaci√≥n incompletos');\n            queueAudioMessage(AUDIO_MESSAGES.loginError);\n            return;\n        }\n        \n        login({\n            token: token,\n            username: user.username,\n            email: user.email\n        });\n        queueAudioMessage(AUDIO_MESSAGES.loginSuccess);\n        setTimeout(() => navigate('/home'), 2000);\n    };\n\n    // Funciones para captura facial\n    const handlePhotoComplete = (blob) => {\n        setPhotoBlob(blob);\n    };\n\n    const handleStartCapture = () => {\n        setIsCapturing(true);\n    };\n\n    const handleStopCapture = () => {\n        setIsCapturing(false);\n    };\n\n    // Funci√≥n para enviar formulario\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        setError('');\n        setSuccess('');\n\n        // Imprimir los datos del formulario en la consola\n        console.log('Datos del formulario enviado:', {\n            username,\n            email,\n            password,\n            isRegistering,\n            tieneAudioBiometrico: !!audioBlob,\n            tieneFotoBiometrica: !!photoBlob\n        });\n\n        // Validar campos\n        if (isRegistering) {\n            if (!username || !email || !password) {\n                setError('Por favor completa todos los campos');\n                return;\n            }\n\n            const formData = new FormData();\n            formData.append('username', username);\n            formData.append('email', email);\n            formData.append('password', password);\n\n\n            if(audioBlob){\n                formData.append('voice_recording', audioBlob, 'voice.wav');\n            }\n            \n            if (photoBlob) {\n                formData.append('face_photo', photoBlob, 'face.jpg');\n            }\n\n            try {\n                const response = await fetch(`${config.API_URL}/auth/register`, {\n                    method: 'POST',\n                    body: formData\n                });\n\n                if (!response.ok) {\n                    const errorData = await response.json();\n                    throw new Error(errorData.detail || 'Error en el registro');\n                }\n\n                const data = await response.json();\n                setSuccess('Registro exitoso. Por favor, inicia sesi√≥n.');\n                queueAudioMessage(AUDIO_MESSAGES.loginSuccess);\n                setIsRegistering(false);\n                setEmail('');\n                setPassword('');\n                setUsername('');\n                setAudioBlob(null);\n                setPhotoBlob(null);\n            } catch (err) {\n                console.error('Error en el registro:', err);\n                setError('Error al conectar con el servidor');\n                queueAudioMessage(AUDIO_MESSAGES.loginError);\n            }\n        } else {\n            if (!username || !password) {\n                setError('Por favor completa todos los campos');\n                return;\n            }\n\n            try {\n                const loginData = new URLSearchParams({username, password});\n                \n                const response = await fetch(`${config.API_URL}/auth/login`, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/x-www-form-urlencoded',\n                    },\n                    body: loginData\n                });\n\n                if (!response.ok) {\n                    const errorData = await response.json();\n                    throw new Error(errorData.detail || 'Error en el inicio de sesi√≥n');\n                }\n\n                const data = await response.json();\n                \n                if (!data.access_token) {\n                    throw new Error('No se recibi√≥ token en la respuesta');\n                }\n\n                const loginDataToSend = {\n                    token: data.access_token,\n                    username: data.username || username,\n                    email: data.email || email\n                };\n\n                login(loginDataToSend);\n                queueAudioMessage(AUDIO_MESSAGES.loginSuccess);\n                setTimeout(() => navigate('/home'), 2000);\n            } catch (err) {\n                console.error('Error en el inicio de sesi√≥n:', err);\n                setError('Error al conectar con el servidor');\n                queueAudioMessage(AUDIO_MESSAGES.loginError);\n            }\n        }\n    };\n\n    // Modificar el useEffect que reproduce la bienvenida al cargar el componente\n    useEffect(() => {\n        console.log('üéôÔ∏è Inicializando componente de login accesible');\n        \n        // No reproducir autom√°ticamente el mensaje de bienvenida\n        // La reproducci√≥n se manejar√° a trav√©s de handleUserInteraction despu√©s de la primera interacci√≥n\n        \n    }, []);\n\n    // Funci√≥n para reproducir un mensaje con respaldo de s√≠ntesis de voz\n    const playWithFallback = (messageKey, fallbackText) => {\n        try {\n            // Primero verificar si el audio existe\n            fetch(`${window.location.origin}/audio/${messageKey}.mp3`, { method: 'HEAD' })\n                .then(response => {\n                    if (response.ok) {\n                        console.log(`Reproduciendo audio ${messageKey} desde archivo...`);\n                        queueAudioMessage(messageKey);\n                    } else {\n                        console.log(`Audio ${messageKey} no encontrado, usando s√≠ntesis de voz...`);\n                        // Si no existe el archivo, usar s√≠ntesis de voz como respaldo\n                        try {\n                            const msg = new SpeechSynthesisUtterance();\n                            msg.text = fallbackText;\n                            msg.lang = 'es-ES';\n                            msg.rate = 0.9; // Velocidad ligeramente m√°s lenta para mejor comprensi√≥n\n                            window.speechSynthesis.speak(msg);\n                        } catch (synthError) {\n                            console.error(`Error con s√≠ntesis de voz: ${synthError}`);\n                        }\n                    }\n                })\n                .catch(error => {\n                    console.error(`Error al verificar audio ${messageKey}:`, error);\n                });\n        } catch (error) {\n            console.error(`Error al reproducir mensaje ${messageKey}:`, error);\n        }\n    };\n\n    // Funci√≥n para manejar la contrase√±a en braille\n    const handleBraillePasswordComplete = (braillePassword) => {\n        queueAudioMessage(AUDIO_MESSAGES.braillePasswordSaved);\n        console.log(\"Contrase√±a braille completada:\", braillePassword);\n        setPassword(braillePassword);\n        setShowBrailleInput(false);\n        setIsBrailleComplete(true);\n\n        sessionStorage.setItem('username', username);\n        sessionStorage.setItem('email', email);\n        sessionStorage.setItem('password', braillePassword);\n        // Imprimir en la consola los datos de registro capturados hasta el momento\n        console.log(\"\\n%c========== DATOS DE REGISTRO CAPTURADOS ==========\", \"color: #4CAF50; font-weight: bold; font-size: 14px;\");\n        console.log(\"%cUsuario: %c\" + username, \"color: #2196F3; font-weight: bold\", \"color: #000; font-weight: normal\");\n        console.log(\"%cCorreo: %c\" + email, \"color: #2196F3; font-weight: bold\", \"color: #000; font-weight: normal\");\n        console.log(\"%cContrase√±a: %c\" + braillePassword, \"color: #2196F3; font-weight: bold\", \"color: #000; font-weight: normal\");\n        console.log(\"%c===================================================\", \"color: #4CAF50; font-weight: bold; font-size: 14px;\");\n\n        // Dar tiempo adicional para que el componente se actualice y renderice el VoiceRecorder\n        setTimeout(() => {\n            try {\n                console.log('üîç Buscando bot√≥n de grabaci√≥n para activarlo autom√°ticamente...');\n                // Usar m√∫ltiples selectores en caso de que uno no funcione\n                const selector = '.voice-recorder-container button';\n                const recordButton = document.querySelector(selector);\n                \n                if (recordButton) {\n                    console.log('‚úÖ Bot√≥n de grabaci√≥n encontrado. Activando grabaci√≥n de voz autom√°ticamente...');\n                    recordButton.click();\n                } else {\n                    console.error('‚ùå No se encontr√≥ el bot√≥n de grabaci√≥n');\n                }\n            } catch (error) {\n                console.error('Error al activar la grabaci√≥n de voz:', error);\n            }\n        }, 3000); // Aumentar tiempo de espera a 3000ms para asegurar que el componente est√© montado\n    };\n\n    // Verificar el estado de showBrailleInput\n    useEffect(() => {\n        if (showBrailleInput) {\n            console.log('üîê showBrailleInput ha cambiado a true - Iniciando creaci√≥n de contrase√±a braille');\n            // Detener reconocimiento de voz si est√° activo\n            if (isListening) {\n                handleStopListening();\n            }\n            \n        }\n    }, [showBrailleInput]);\n\n    const [wasRegistered, setWasRegistered] = useState(false);\n\n    useEffect(() => {\n      const registeredFlag = sessionStorage.getItem('registered');\n      if (registeredFlag === 'true') {\n        setWasRegistered(true);\n        sessionStorage.removeItem('registered'); // Limpiar para que no se muestre otra vez\n      }\n    }, []);\n    \n\n    return (\n        \n        <div \n            className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-indigo-100 to-white py-12 px-4 sm:px-6 lg:px-8\"\n            onClick={handleUserInteraction}\n            onTouchStart={handleUserInteraction}\n            tabIndex={0}\n            role=\"button\"\n            aria-label=\"Activar asistente vocal\"\n        >\n            <div className=\"max-w-md w-full space-y-8 bg-white p-8 rounded-xl shadow-lg\">\n                <div>\n                    <h2 className=\"mt-6 text-center text-3xl font-extrabold text-gray-900\">\n                        {isRegistering \n                            ? 'Crear cuenta accesible' \n                            : isLoggingIn \n                                ? 'Iniciar sesi√≥n accesible'\n                                : 'Acceso accesible por voz'}\n                    </h2>\n                    <p className=\"mt-2 text-center text-sm text-gray-600\">\n                        Sistema de acceso para personas con discapacidad visual\n                    </p>\n                    \n                    {/* ‚úÖ MENSAJE DE REGISTRO EXITOSO */}\n                    {wasRegistered && (\n                    <div className=\"bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4 text-center\">\n                        ‚úÖ Registro exitoso. Ahora puedes iniciar sesi√≥n.\n                    </div>\n                    )}\n                    {!isInitialized && (\n                        <p className=\"mt-4 text-center text-sm text-indigo-600 animate-pulse\">\n                            Toca cualquier parte de la pantalla para comenzar\n                        </p>\n                    )}\n                    {isInitialized && !isListening && (\n                        <div className=\"mt-4 text-center text-sm text-indigo-600 space-y-2\">\n                            <p>\n                                Presiona la tecla <span className=\"font-bold\">espacio</span> para activar el asistente\n                            </p>\n                            <p>\n                                Presiona <span className=\"font-bold\">enter</span> para repetir el √∫ltimo mensaje\n                            </p>\n                            <p>\n                                Presiona <span className=\"font-bold\">espacio</span> durante un audio para interrumpirlo\n                            </p>\n                        </div>\n                    )}\n                </div>\n\n                {!showVoiceLogin && !showFaceLogin ? (\n                    showBrailleInput ? (\n                        <div className=\"mt-8 braille-container\">\n                            <h3 className=\"text-lg font-medium text-center text-blue-800 mb-4\">\n                                Creaci√≥n de contrase√±a mediante Braille\n                            </h3>\n                            <p className=\"text-sm text-center text-gray-600 mb-4\">\n                                Indica verbalmente los puntos del patr√≥n braille para crear tu contrase√±a\n                            </p>\n                            <BraillePassword onPasswordComplete={handleBraillePasswordComplete} />\n                        </div>\n                    ) : (\n                        <>\n                            <form className=\"mt-8 space-y-6\" onSubmit={handleSubmit}>\n                                <div className=\"rounded-md shadow-sm -space-y-px\">\n                                    {isRegistering && !isBrailleComplete && (\n                                        <div>\n                                            <label htmlFor=\"username\" className=\"sr-only\">\n                                                Nombre de usuario\n                                            </label>\n                                            <input\n                                                id=\"username\"\n                                                name=\"username\"\n                                                type=\"text\"\n                                                required\n                                                value={username}\n                                                onChange={(e) => setUsername(e.target.value)}\n                                                className=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm\"\n                                                placeholder=\"Nombre de usuario\"\n                                            />\n                                        </div>\n                                    )}\n                                    <div>\n                                        <label htmlFor=\"email\" className=\"sr-only\">\n                                            Correo electr√≥nico\n                                        </label>\n                                        <input\n                                            id=\"email\"\n                                            name=\"email\"\n                                            type=\"email\"\n                                            required\n                                            value={email}\n                                            onChange={(e) => setEmail(e.target.value)}\n                                            className={`appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 ${\n                                                isRegistering && !isBrailleComplete ? 'rounded-none' : 'rounded-t-md'\n                                            } focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm`}\n                                            placeholder=\"Correo electr√≥nico\"\n                                        />\n                                    </div>\n                                    {(!isRegistering || !isBrailleComplete) && (\n                                        <div>\n                                            <label htmlFor=\"password\" className=\"sr-only\">\n                                                Contrase√±a\n                                            </label>\n                                            <input\n                                                id=\"password\"\n                                                name=\"password\"\n                                                type=\"password\"\n                                                required\n                                                value={password}\n                                                onChange={(e) => setPassword(e.target.value)}\n                                                className=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm\"\n                                                placeholder=\"Contrase√±a\"\n                                            />\n                                        </div>\n                                    )}\n                                </div>\n\n                                {transcript && (\n                                    <div className=\"mt-4 p-4 bg-gray-50 rounded-md\">\n                                        <p className=\"text-sm text-gray-700\">Texto reconocido: {transcript}</p>\n                                    </div>\n                                )}\n\n                                {error && (\n                                    <div className=\"text-red-500 text-sm text-center\">\n                                        {error}\n                                    </div>\n                                )}\n\n                                {success && (\n                                    <div className=\"text-green-500 text-sm text-center\">\n                                        {success}\n                                    </div>\n                                )}\n\n                                {audioError && (\n                                    <div className=\"mt-4 p-4 bg-red-50 rounded-md\">\n                                        <p className=\"text-sm text-red-700\">\n                                            Error al reproducir audio. Por favor, verifica que los archivos de audio existan en la carpeta correcta.\n                                        </p>\n                                    </div>\n                                )}\n\n                                {isListening && (\n                                    <div className=\"mt-4 p-4 bg-green-50 rounded-md\">\n                                        <p className=\"text-sm text-green-700\">Escuchando... (se detendr√° autom√°ticamente despu√©s de 1 segundo de silencio)</p>\n                                    </div>\n                                )}\n\n                                <div>\n                                    <button\n                                        type=\"submit\"\n                                        className=\"group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\n                                    >\n                                        {isRegistering ? 'Registrarse' : 'Iniciar sesi√≥n'}\n                                    </button>\n                                </div>\n                            </form>\n\n                            {isRegistering && !isBrailleComplete && !showBrailleInput && (\n                                <div className=\"mt-8\">\n                                    <div className=\"mb-6 p-4 bg-blue-50 rounded-lg border border-blue-200\">\n                                        <h3 className=\"text-lg font-semibold text-blue-800 mb-2\">Modo de Registro</h3>\n                                        <p className=\"text-sm text-blue-700 mb-2\">\n                                            Por favor, completa los campos del formulario para crear tu cuenta.\n                                        </p>\n                                        <p className=\"text-sm text-blue-700\">\n                                            Tambi√©n puedes usar el asistente de voz para dictar tu informaci√≥n.\n                                        </p>\n                                    </div>\n                                    \n                                    {/* Bot√≥n expl√≠cito para activar reconocimiento de voz */}\n                                    {!email && (\n                                        <div className=\"mb-6\">\n                                            <button\n                                                type=\"button\"\n                                                onClick={() => {\n                                                    if (!isPlayingRef.current && !isListening) {\n                                                        handleStartListening();\n                                                    } else if (isListening) {\n                                                        handleStopListening();\n                                                    }\n                                                }}\n                                                className={`w-full flex justify-center py-3 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium ${\n                                                    isListening \n                                                        ? 'text-white bg-red-600 hover:bg-red-700' \n                                                        : 'text-white bg-green-600 hover:bg-green-700'\n                                                } focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500`}\n                                            >\n                                                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 mr-2\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                                                    <path fillRule=\"evenodd\" d=\"M7 4a3 3 0 016 0v4a3 3 0 11-6 0V4zm4 10.93A7.001 7.001 0 0017 8a1 1 0 10-2 0A5 5 0 015 8a1 1 0 00-2 0 7.001 7.001 0 006 6.93V17H6a1 1 0 100 2h8a1 1 0 100-2h-3v-2.07z\" clipRule=\"evenodd\" />\n                                                </svg>\n                                                {isListening ? 'Detener reconocimiento' : 'Hablar para registrarse'}\n                                            </button>\n                                            <p className=\"mt-2 text-xs text-center text-gray-500\">\n                                                Presiona este bot√≥n cuando est√©s listo para hablar y proporcionar tus datos\n                                            </p>\n                                        </div>\n                                    )}\n                                    \n                                    {email && (\n                                        <div className=\"mt-3\">\n                                            <button\n                                                type=\"button\"\n                                                onClick={() => setShowBrailleInput(true)}\n                                                className=\"w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-teal-600 hover:bg-teal-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-teal-500\"\n                                            >\n                                                Crear contrase√±a con Braille\n                                            </button>\n                                            <p className=\"mt-2 text-xs text-center text-gray-500\">\n                                                Crea una contrase√±a segura mediante el sistema braille\n                                            </p>\n                                        </div>\n                                    )}\n                                </div>\n                            )}\n\n                            {!isRegistering && (\n                                <div className=\"mt-6\">\n                                    <div className=\"relative\">\n                                        <div className=\"absolute inset-0 flex items-center\">\n                                            <div className=\"w-full border-t border-gray-300\"></div>\n                                        </div>\n                                        <div className=\"relative flex justify-center text-sm\">\n                                            <span className=\"px-2 bg-white text-gray-500\">Otras opciones</span>\n                                        </div>\n                                    </div>\n\n                                    <div className=\"mt-6 grid grid-cols-2 gap-3\">\n                                        <button\n                                            onClick={() => {\n                                                updateAppState('voiceLogin');\n                                            }}\n                                            className=\"w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-purple-600 hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500\"\n                                        >\n                                            Voz\n                                        </button>\n                                        <button\n                                            onClick={() => {\n                                                updateAppState('faceLogin');\n                                            }}\n                                            className=\"w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\n                                        >\n                                            Facial\n                                        </button>\n                                    </div>\n                                </div>\n                            )}\n                        </>\n                    )\n                ) : showFaceLogin ? (\n                    <div className=\"mt-8\">\n                        <FaceLogin onLoginSuccess={handleVoiceLoginSuccess} />\n                        <div className=\"mt-4 text-center\">\n                            <button\n                                onClick={() => {\n                                    updateAppState('backToMain');\n                                }}\n                                className=\"text-sm text-indigo-600 hover:text-indigo-500\"\n                            >\n                                Volver al login normal\n                            </button>\n                        </div>\n                    </div>\n                ) : (\n                    <div className=\"mt-8\">\n                        <VoiceLogin onLoginSuccess={handleVoiceLoginSuccess} />\n                        <div className=\"mt-4 text-center\">\n                            <button\n                                onClick={() => {\n                                    updateAppState('backToMain');\n                                }}\n                                className=\"text-sm text-indigo-600 hover:text-indigo-500\"\n                            >\n                                Volver al login normal\n                            </button>\n                        </div>\n  \n                    </div>\n                )}\n\n                {isRegistering && isBrailleComplete && (\n                    <div className=\"mt-8\">\n                        <div className=\"mb-6 p-4 bg-blue-50 rounded-lg border border-blue-200\">\n                            <h3 className=\"text-lg font-semibold text-blue-800 mb-2\">Registro Biom√©trico (Opcional)</h3>\n                            <p className=\"text-sm text-blue-700 mb-2\">\n                                Has registrado correctamente tu contrase√±a mediante braille.\n                            </p>\n                            <p className=\"text-sm text-blue-700\">\n                                Ahora puedes registrar tu voz y tu rostro para facilitar tus inicios de sesi√≥n futuros.\n                            </p>\n                        </div>\n                        \n                        <div className=\"text-center mb-4\">\n                            <p className=\"text-sm text-gray-600\">Grabaci√≥n de voz (opcional)</p>\n                            <p className=\"text-xs text-gray-500\">Te permitir√° iniciar sesi√≥n usando tu voz en el futuro</p>\n                        </div>\n                        <VoiceRecorder\n                            onRecordingComplete={handleVoiceRecordingComplete}\n                            onStartRecording={handleStartRecording}\n                            onStopRecording={handleStopRecording}\n                        />\n                        \n                        <div className=\"mt-6\">\n                            <div className=\"text-center mb-4\">\n                                <p className=\"text-sm text-gray-600\">Registro facial (opcional)</p>\n                                <p className=\"text-xs text-gray-500\">Te permitir√° iniciar sesi√≥n usando reconocimiento facial</p>\n                            </div>\n                            <FaceRecorder\n                                onPhotoComplete={handlePhotoComplete}\n                                onStartCapture={handleStartCapture}\n                                onStopCapture={handleStopCapture}\n                            />\n                        </div>\n                        \n                        <div className=\"mt-6\">\n                            <button\n                                type=\"button\"\n                                onClick={handleSubmit}\n                                className=\"w-full flex justify-center py-3 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500\"\n                            >\n                                Completar Registro\n                            </button>\n                        </div>\n                    </div>\n                )}\n            </div>\n            {process.env.NODE_ENV !== 'production' && (\n                <div className=\"fixed bottom-0 right-0 m-4 p-4 bg-black text-white text-xs rounded shadow-lg opacity-70\">\n                    <h4 className=\"font-bold mb-2\">Estado actual:</h4>\n                    <ul>\n                        <li>isRegistering: {isRegistering ? '‚úÖ' : '‚ùå'}</li>\n                        <li>showVoiceLogin: {showVoiceLogin ? '‚úÖ' : '‚ùå'}</li>\n                        <li>showFaceLogin: {showFaceLogin ? '‚úÖ' : '‚ùå'}</li>\n                        <li>isLoggingIn: {isLoggingIn ? '‚úÖ' : '‚ùå'}</li>\n                        <li>isListening: {isListening ? '‚úÖ' : '‚ùå'}</li>\n                        <li>isInitialized: {isInitialized ? '‚úÖ' : '‚ùå'}</li>\n                    </ul>\n                    <button \n                        onClick={() => updateAppState('register')} \n                        className=\"mt-2 mr-2 px-2 py-1 bg-purple-700 text-white rounded text-xs\"\n                    >\n                        Forzar Registro\n                    </button>\n                    <button \n                        onClick={() => updateAppState('login')} \n                        className=\"mt-2 px-2 py-1 bg-blue-700 text-white rounded text-xs\"\n                    >\n                        Forzar Login\n                    </button>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default AccessibleLogin;"
        }
    ]
}