{
    "sourceFile": "src/pages/LoggedIn/Componentes-Iniciado/Navigation_mic.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746989716270,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746989716270,
            "name": "Commit-0",
            "content": "// src/pages/LoggedIn/Componentes-Iniciado/Navigation_mic.jsx\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport './NavigationMic.css'; // Crea este archivo para estilos\nimport { useNavigationContext } from '../../../context/NavigationContext'; // Ajusta ruta\n\nconst SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n\nconst NavigationMic = () => {\n  const {\n    isNavMicListening: contextIsListening,\n    processNavCommand,\n    startNavListening,\n    stopNavListening\n   } = useNavigationContext();\n\n  const [isListeningLocal, setIsListeningLocal] = useState(false);\n  const [statusMessageLocal, setStatusMessageLocal] = useState('Navegar (Espacio)'); // Mensaje corto para title\n  const [error, setError] = useState(null);\n\n  const recognitionRef = useRef(null);\n  const spacebarHeldRef = useRef(false);\n  const commandToSendRef = useRef('');\n\n  useEffect(() => { setIsListeningLocal(contextIsListening); }, [contextIsListening]);\n\n  useEffect(() => {\n    if (!SpeechRecognition) { setError(\"Voz no soportada.\"); return; }\n    const recognition = new SpeechRecognition();\n    recognition.continuous = false; recognition.interimResults = false; recognition.lang = 'es-ES';\n    recognitionRef.current = recognition;\n\n    recognition.onstart = () => {\n      console.log(\"NavMic: onstart\"); setIsListeningLocal(true); startNavListening();\n      setStatusMessageLocal(\"Escuchando navegación...\"); setError(null); commandToSendRef.current = '';\n    };\n    recognition.onresult = (event) => {\n      const command = event.results[event.results.length - 1][0].transcript.trim();\n      console.log(\"NavMic: onresult:\", command); setStatusMessageLocal(`Detectado: \"${command}\"`);\n      commandToSendRef.current = command;\n    };\n    recognition.onerror = (event) => {\n      console.error(\"NavMic: onerror:\", event.error); let errorMsg = `Error: ${event.error}`;\n      if (event.error === 'not-allowed') { errorMsg = 'Permiso Mic. denegado.'; }\n      else if (event.error === 'no-speech') { errorMsg = 'No se detectó voz.'; }\n      setError(errorMsg); setStatusMessageLocal('Error Mic.'); setIsListeningLocal(false); stopNavListening(); commandToSendRef.current = '';\n    };\n    recognition.onend = () => {\n      console.log(\"NavMic: onend\"); setIsListeningLocal(false); stopNavListening();\n      const finalCommand = commandToSendRef.current;\n      if (processNavCommand && finalCommand) { processNavCommand(finalCommand); }\n      else if (processNavCommand && !error) { processNavCommand(''); }\n      if (!error) { setStatusMessageLocal('Navegar (Espacio)'); }\n      commandToSendRef.current = '';\n    };\n    return () => { if (recognitionRef.current) { try {recognitionRef.current.abort();}catch(e){}} };\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [processNavCommand, startNavListening, stopNavListening, error]);\n\n  const handleKeyDown = useCallback((event) => {\n    const target = event.target;\n    if (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA' || target.tagName === 'SELECT' || target.isContentEditable) return;\n    if (event.code === 'Space' && !isListeningLocal && !spacebarHeldRef.current) {\n      event.preventDefault(); spacebarHeldRef.current = true;\n      if (recognitionRef.current) {\n        try { console.log(\"NavMic: Iniciando por Espacio...\"); recognitionRef.current.start(); }\n        catch (err) { console.error(\"NavMic: Error al iniciar:\", err); setError(\"No se pudo iniciar Mic.\"); spacebarHeldRef.current = false;}\n      }\n    }\n  }, [isListeningLocal]);\n\n  const handleKeyUp = useCallback((event) => {\n    if (event.code === 'Space') { spacebarHeldRef.current = false; }\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n    window.addEventListener('keyup', handleKeyUp);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n      window.removeEventListener('keyup', handleKeyUp);\n    };\n  }, [handleKeyDown, handleKeyUp]);\n\n  if (!SpeechRecognition && !error) { return <div className=\"navigation-mic-error\" title=\"Voz no soportada\">🚫</div>; }\n\n  return (\n    <div className={`navigation-mic ${isListeningLocal ? 'listening' : ''} ${error ? 'mic-error' : ''}`} title={error || statusMessageLocal}>\n      <span className=\"mic-icon\">🎙️</span> {/* Cambiado a un emoji más estándar */}\n    </div>\n  );\n};\nexport default NavigationMic;"
        }
    ]
}