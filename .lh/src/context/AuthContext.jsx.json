{
    "sourceFile": "src/context/AuthContext.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1746114788630,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746122680133,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,28 +29,51 @@\n     useEffect(() => {\n         const initializeAuth = async () => {\n             logAuth('Inicializando autenticación');\n             try {\n-                const userData = localStorage.getItem('user');\n-                const token = localStorage.getItem('token');\n+                // Primero intentar obtener datos de localStorage\n+                let userData = localStorage.getItem('user');\n+                let token = localStorage.getItem('token');\n                 \n+                // Si no hay en localStorage, intentar con sessionStorage\n+                if (!token) {\n+                    token = sessionStorage.getItem('access_token');\n+                    userData = sessionStorage.getItem('user');\n+                    \n+                    // Si hay token pero no hay userData, intentar recrear desde campos individuales\n+                    if (token && !userData) {\n+                        const username = sessionStorage.getItem('username');\n+                        const email = sessionStorage.getItem('email');\n+                        if (email) {\n+                            userData = JSON.stringify({ username: username || email, email });\n+                        }\n+                    }\n+                }\n+                \n                 logAuth('Datos de autenticación encontrados', { \n                     hasUserData: !!userData, \n-                    hasToken: !!token \n+                    hasToken: !!token,\n+                    source: token ? (localStorage.getItem('token') ? 'localStorage' : 'sessionStorage') : 'ninguno'\n                 });\n                 \n-                if (userData && token && checkAuth()) {\n-                    const parsedUser = JSON.parse(userData);\n+                if (userData && token) {\n+                    const parsedUser = typeof userData === 'string' ? JSON.parse(userData) : userData;\n                     logAuth('Usuario autenticado encontrado', { \n                         username: parsedUser.username,\n                         email: parsedUser.email\n                     });\n                     setUser(parsedUser);\n+                    \n+                    // Asegurarse de que el token esté disponible en ambos storages\n+                    localStorage.setItem('token', token);\n+                    sessionStorage.setItem('access_token', token);\n                 } else {\n                     logAuth('No se encontraron datos de autenticación válidos, limpiando almacenamiento');\n                     // Si no hay datos válidos, limpiar todo\n                     localStorage.removeItem('user');\n                     localStorage.removeItem('token');\n+                    sessionStorage.removeItem('user');\n+                    sessionStorage.removeItem('access_token');\n                     setUser(null);\n                 }\n             } catch (error) {\n                 console.error('[AUTH] Error al inicializar la autenticación:', error);\n@@ -70,28 +93,34 @@\n             email: userData.email\n         });\n         \n         try {\n-\n-            sessionStorage.setItem('user', JSON.stringify({\n+            // Guardar datos de usuario en ambos storages para consistencia\n+            const userObject = {\n                 username: userData.username,\n                 email: userData.email\n-            }));\n+            };\n             \n-            // Guardar token\n-            sessionStorage.setItem('sijala', true)\n-            sessionStorage.setItem('username', userData.username)\n-            sessionStorage.setItem('email', userData.email)\n+            localStorage.setItem('user', JSON.stringify(userObject));\n+            sessionStorage.setItem('user', JSON.stringify(userObject));\n             \n+            // Guardar token en ambos storages\n+            if (userData.token) {\n+                localStorage.setItem('token', userData.token);\n+                sessionStorage.setItem('access_token', userData.token);\n+            }\n+            \n+            // Guardar campos individuales en sessionStorage (para compatibilidad)\n+            sessionStorage.setItem('sijala', 'true');\n+            sessionStorage.setItem('username', userData.username);\n+            sessionStorage.setItem('email', userData.email);\n+            \n             logAuth('Login exitoso', { \n                 username: userData.username,\n                 email: userData.email\n             });\n             \n-            setUser({\n-                username: userData.username,\n-                email: userData.email\n-            });\n+            setUser(userObject);\n             \n             return true;\n         } catch (error) {\n             console.error('[AUTH] Error durante el login:', error);\n@@ -102,15 +131,19 @@\n \n     const logout = () => {\n         logAuth('Iniciando proceso de logout');\n         try {\n-            // Limpiar datos de autenticación\n+            // Limpiar datos de autenticación de ambos storages\n             localStorage.removeItem('token');\n             localStorage.removeItem('user');\n+            sessionStorage.removeItem('access_token');\n+            sessionStorage.removeItem('user');\n+            sessionStorage.removeItem('username');\n+            sessionStorage.removeItem('email');\n+            sessionStorage.removeItem('sijala');\n+            \n             setUser(null);\n             logAuth('Logout exitoso');\n-            localStorage.clear();\n-            sessionStorage.clear();\n         } catch (error) {\n             console.error('[AUTH] Error durante el logout:', error);\n             logAuth('Error durante el logout', { error: error.message });\n         }\n@@ -127,5 +160,5 @@\n         <AuthContext.Provider value={value}>\n             {children}\n         </AuthContext.Provider>\n     );\n-}; \n\\ No newline at end of file\n+};\n\\ No newline at end of file\n"
                }
            ],
            "date": 1746114788630,
            "name": "Commit-0",
            "content": "import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { checkAuth, login as authLogin, logout as authLogout } from '../utils/auth';\n\n// Función para logging\nconst logAuth = (message, data = null) => {\n    const timestamp = new Date().toISOString();\n    if (data) {\n        console.log(`[${timestamp}] AUTH: ${message}`, data);\n    } else {\n        console.log(`[${timestamp}] AUTH: ${message}`);\n    }\n};\n\nconst AuthContext = createContext(null);\n\nexport const useAuth = () => {\n    const context = useContext(AuthContext);\n    if (!context) {\n        console.error('[AUTH] Error: useAuth debe ser usado dentro de un AuthProvider');\n        throw new Error('useAuth debe ser usado dentro de un AuthProvider');\n    }\n    return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n    const [user, setUser] = useState(null);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        const initializeAuth = async () => {\n            logAuth('Inicializando autenticación');\n            try {\n                const userData = localStorage.getItem('user');\n                const token = localStorage.getItem('token');\n                \n                logAuth('Datos de autenticación encontrados', { \n                    hasUserData: !!userData, \n                    hasToken: !!token \n                });\n                \n                if (userData && token && checkAuth()) {\n                    const parsedUser = JSON.parse(userData);\n                    logAuth('Usuario autenticado encontrado', { \n                        username: parsedUser.username,\n                        email: parsedUser.email\n                    });\n                    setUser(parsedUser);\n                } else {\n                    logAuth('No se encontraron datos de autenticación válidos, limpiando almacenamiento');\n                    // Si no hay datos válidos, limpiar todo\n                    localStorage.removeItem('user');\n                    localStorage.removeItem('token');\n                    setUser(null);\n                }\n            } catch (error) {\n                console.error('[AUTH] Error al inicializar la autenticación:', error);\n                setUser(null);\n            } finally {\n                setLoading(false);\n                logAuth('Inicialización de autenticación completada', { loading: false });\n            }\n        };\n\n        initializeAuth();\n    }, []);\n\n    const login = (userData) => {\n        logAuth('Iniciando proceso de login', { \n            username: userData.username,\n            email: userData.email\n        });\n        \n        try {\n\n            sessionStorage.setItem('user', JSON.stringify({\n                username: userData.username,\n                email: userData.email\n            }));\n            \n            // Guardar token\n            sessionStorage.setItem('sijala', true)\n            sessionStorage.setItem('username', userData.username)\n            sessionStorage.setItem('email', userData.email)\n            \n            logAuth('Login exitoso', { \n                username: userData.username,\n                email: userData.email\n            });\n            \n            setUser({\n                username: userData.username,\n                email: userData.email\n            });\n            \n            return true;\n        } catch (error) {\n            console.error('[AUTH] Error durante el login:', error);\n            logAuth('Error durante el login', { error: error.message });\n            return false;\n        }\n    };\n\n    const logout = () => {\n        logAuth('Iniciando proceso de logout');\n        try {\n            // Limpiar datos de autenticación\n            localStorage.removeItem('token');\n            localStorage.removeItem('user');\n            setUser(null);\n            logAuth('Logout exitoso');\n            localStorage.clear();\n            sessionStorage.clear();\n        } catch (error) {\n            console.error('[AUTH] Error durante el logout:', error);\n            logAuth('Error durante el logout', { error: error.message });\n        }\n    };\n\n    const value = {\n        user,\n        loading,\n        login,\n        logout\n    };\n\n    return (\n        <AuthContext.Provider value={value}>\n            {children}\n        </AuthContext.Provider>\n    );\n}; "
        }
    ]
}