{
    "sourceFile": "src/pages/LoggedIn/Logica.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1746061173230,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746062346061,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n // 1. Importa React\n import React from 'react';\n+import Micro-enter from './Componentes-Iniciado/Micro-enter';\n \n // 2. Define el componente como una función\n //    (El nombre de la función debe empezar con mayúscula)\n const MiComponenteBasico = () => {\n"
                },
                {
                    "date": 1746062352790,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n // 1. Importa React\n import React from 'react';\n-import Micro-enter from './Componentes-Iniciado/Micro-enter';\n+import 'Micro-enter' from './Componentes-Iniciado/Micro-enter';\n \n // 2. Define el componente como una función\n //    (El nombre de la función debe empezar con mayúscula)\n const MiComponenteBasico = () => {\n"
                },
                {
                    "date": 1746062410820,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,18 +1,26 @@\n // 1. Importa React\n import React from 'react';\n-import 'Micro-enter' from './Componentes-Iniciado/Micro-enter';\n+import SpeechToTextPTT from './Componentes-Iniciado/Micro-enter';\n \n // 2. Define el componente como una función\n-//    (El nombre de la función debe empezar con mayúscula)\n const MiComponenteBasico = () => {\n-  // 3. La función devuelve JSX (código que parece HTML)\n-  return (\n-    <div>\n-      <h1>Hola desde mi componente básico!</h1>\n-      <p>Este es un párrafo simple.</p>\n-    </div>\n-  );\n-};\n-\n-// 4. Exporta el componente para poder usarlo en otras partes de tu aplicación\n\\ No newline at end of file\n-export default MiComponenteBasico;\n+    // 3. La función devuelve JSX (código que parece HTML)\n+    return (\n+      <div>\n+        <h1>Hola desde mi componente básico!</h1>\n+        <p>Este es un párrafo simple.</p>\n+  \n+        {/* --- Aquí se renderiza el componente SpeechToTextPTT --- */}\n+        {/* Al incluir <SpeechToTextPTT />, todo lo que ese componente renderiza */}\n+        {/* (el control de voz y el área de texto) aparecerá en este punto */}\n+        <SpeechToTextPTT />\n+  \n+        {/* Puedes seguir añadiendo más contenido si quieres */}\n+        {/* <p>Más contenido después del control de voz.</p> */}\n+  \n+      </div>\n+    );\n+  };\n+  \n+  // 4. Exporta el componente\n+  export default MiComponenteBasico;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1746063778537,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,16 @@\n // 1. Importa React\n import React from 'react';\n import SpeechToTextPTT from './Componentes-Iniciado/Micro-enter';\n+import Navbar from '../../components/Navbar';\n \n // 2. Define el componente como una función\n const MiComponenteBasico = () => {\n     // 3. La función devuelve JSX (código que parece HTML)\n     return (\n+        \n       <div>\n+      <navbar />\n         <h1>Hola desde mi componente básico!</h1>\n         <p>Este es un párrafo simple.</p>\n   \n         {/* --- Aquí se renderiza el componente SpeechToTextPTT --- */}\n"
                },
                {
                    "date": 1746063822715,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,29 +1,32 @@\n // 1. Importa React\n import React from 'react';\n+// Importa el componente SpeechToTextPTT (ruta ajustada por el usuario)\n import SpeechToTextPTT from './Componentes-Iniciado/Micro-enter';\n+// Importa el componente Navbar (ruta ajustada por el usuario)\n import Navbar from '../../components/Navbar';\n \n // 2. Define el componente como una función\n const MiComponenteBasico = () => {\n     // 3. La función devuelve JSX (código que parece HTML)\n     return (\n-        \n+      // Este es el contenedor principal del componente\n       <div>\n-      <navbar />\n+        {/* --- ¡AÑADE TU BARRA DE NAVEGACIÓN AQUÍ! --- */}\n+        {/* Se coloca normalmente al principio del contenido principal del componente */}\n+        <Navbar />\n+\n+        {/* --- El resto del contenido de tu página va DESPUÉS de la barra de navegación --- */}\n         <h1>Hola desde mi componente básico!</h1>\n         <p>Este es un párrafo simple.</p>\n-  \n+\n         {/* --- Aquí se renderiza el componente SpeechToTextPTT --- */}\n-        {/* Al incluir <SpeechToTextPTT />, todo lo que ese componente renderiza */}\n-        {/* (el control de voz y el área de texto) aparecerá en este punto */}\n         <SpeechToTextPTT />\n-  \n+\n         {/* Puedes seguir añadiendo más contenido si quieres */}\n-        {/* <p>Más contenido después del control de voz.</p> */}\n-  \n+\n       </div>\n     );\n   };\n-  \n+\n   // 4. Exporta el componente\n   export default MiComponenteBasico;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1746113371676,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,28 +3,31 @@\n // Importa el componente SpeechToTextPTT (ruta ajustada por el usuario)\n import SpeechToTextPTT from './Componentes-Iniciado/Micro-enter';\n // Importa el componente Navbar (ruta ajustada por el usuario)\n import Navbar from '../../components/Navbar';\n+import SideBar from './Componentes-Iniciado/SideBar';\n \n // 2. Define el componente como una función\n const MiComponenteBasico = () => {\n     // 3. La función devuelve JSX (código que parece HTML)\n     return (\n       // Este es el contenedor principal del componente\n-      <div>\n-        {/* --- ¡AÑADE TU BARRA DE NAVEGACIÓN AQUÍ! --- */}\n-        {/* Se coloca normalmente al principio del contenido principal del componente */}\n-        <Navbar />\n+      <div className=\"app-container\">\n+        <SideBar />\n+        <main className=\"content\">\n+          {/* --- ¡AÑADE TU BARRA DE NAVEGACIÓN AQUÍ! --- */}\n+          {/* Se coloca normalmente al principio del contenido principal del componente */}\n+          <Navbar />\n \n-        {/* --- El resto del contenido de tu página va DESPUÉS de la barra de navegación --- */}\n-        <h1>Hola desde mi componente básico!</h1>\n-        <p>Este es un párrafo simple.</p>\n+          {/* --- El resto del contenido de tu página va DESPUÉS de la barra de navegación --- */}\n+          <h1>Hola desde mi componente básico!</h1>\n+          <p>Este es un párrafo simple.</p>\n \n-        {/* --- Aquí se renderiza el componente SpeechToTextPTT --- */}\n-        <SpeechToTextPTT />\n+          {/* --- Aquí se renderiza el componente SpeechToTextPTT --- */}\n+          <SpeechToTextPTT />\n \n-        {/* Puedes seguir añadiendo más contenido si quieres */}\n-\n+          {/* Puedes seguir añadiendo más contenido si quieres */}\n+        </main>\n       </div>\n     );\n   };\n \n"
                },
                {
                    "date": 1746113599281,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n import SpeechToTextPTT from './Componentes-Iniciado/Micro-enter';\n // Importa el componente Navbar (ruta ajustada por el usuario)\n import Navbar from '../../components/Navbar';\n import SideBar from './Componentes-Iniciado/SideBar';\n+import './Logica.css';\n \n // 2. Define el componente como una función\n const MiComponenteBasico = () => {\n     // 3. La función devuelve JSX (código que parece HTML)\n"
                },
                {
                    "date": 1746114294029,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,36 +1,127 @@\n-// 1. Importa React\n-import React from 'react';\n-// Importa el componente SpeechToTextPTT (ruta ajustada por el usuario)\n-import SpeechToTextPTT from './Componentes-Iniciado/Micro-enter';\n-// Importa el componente Navbar (ruta ajustada por el usuario)\n+import React, { useState, useRef } from 'react';\n+// Importa la librería cliente oficial de Google Generative AI para JS\n+import { GoogleGenerativeAI } from '@google/generative-ai';\n+// Importa el componente de reconocimiento de voz (renombrado)\n+import VoiceRecognition from './Componentes-Iniciado/Micro-enter';\n+// Importa el componente Navbar\n import Navbar from '../../components/Navbar';\n import SideBar from './Componentes-Iniciado/SideBar';\n import './Logica.css';\n \n-// 2. Define el componente como una función\n+// --- ¡¡¡ ADVERTENCIA DE SEGURIDAD !!! ---\n+// !!! NO PONGAS TU CLAVE DE API DIRECTAMENTE AQUÍ EN CÓDIGO PARA PRODUCCIÓN !!!\n+// Esto es solo para demostración. Para producción, la llamada a la API debe hacerse desde un BACKEND SEGURO.\n+const API_KEY = \"AIzaSyClAldN4Lvq3HjK1MgogyFdMzitzAqAkXM\";\n+\n const MiComponenteBasico = () => {\n-    // 3. La función devuelve JSX (código que parece HTML)\n-    return (\n-      // Este es el contenedor principal del componente\n-      <div className=\"app-container\">\n-        <SideBar />\n-        <main className=\"content\">\n-          {/* --- ¡AÑADE TU BARRA DE NAVEGACIÓN AQUÍ! --- */}\n-          {/* Se coloca normalmente al principio del contenido principal del componente */}\n-          <Navbar />\n+  // Estados para manejar la comunicación con Gemini\n+  const [geminiResponse, setGeminiResponse] = useState('');\n+  const [isLoadingGemini, setIsLoadingGemini] = useState(false);\n+  const [geminiError, setGeminiError] = useState('');\n \n\\ No newline at end of file\n-          {/* --- El resto del contenido de tu página va DESPUÉS de la barra de navegación --- */}\n-          <h1>Hola desde mi componente básico!</h1>\n-          <p>Este es un párrafo simple.</p>\n+  // Referencias para la comunicación con Gemini\n+  const genAiRef = useRef(null);\n+  const modelRef = useRef(null);\n+  const isGeminiCallingRef = useRef(false);\n \n-          {/* --- Aquí se renderiza el componente SpeechToTextPTT --- */}\n-          <SpeechToTextPTT />\n+  // Configuración de Gemini\n+  const MODEL_NAME = 'gemini-2.0-flash';\n+  const generationConfig = {\n+    \"temperature\": 0.5,\n+  };\n \n-          {/* Puedes seguir añadiendo más contenido si quieres */}\n-        </main>\n-      </div>\n-    );\n+  // Contexto específico para esta sección - personalizable\n+  const CONTEXT_PREFIX = \"Eres un asistente experto en programación web. \";\n+  const PROMPT_PREFIX = CONTEXT_PREFIX + \"Responde de forma concisa a lo siguiente: \";\n+\n+  // Función para enviar el texto reconocido a Gemini\n+  const sendToGemini = async (text, isClearRequest = false) => {\n+    // Si es una solicitud de limpieza, simplemente resetear los estados\n+    if (isClearRequest) {\n+      setGeminiResponse('');\n+      setGeminiError('');\n+      return;\n+    }\n+\n+    // Evitar enviar prompts vacíos o si ya hay una llamada en curso\n+    if (!text.trim() || isLoadingGemini || isGeminiCallingRef.current) {\n+      console.log(\"Saltando llamada a Gemini: texto vacío o ya hay una llamada en progreso.\");\n+      return;\n+    }\n+\n+    setIsLoadingGemini(true);\n+    isGeminiCallingRef.current = true;\n+    setGeminiResponse('');\n+    setGeminiError('');\n+\n+    try {\n+      // Inicializar el cliente y el modelo si no existen ya\n+      if (!genAiRef.current) {\n+        if (!API_KEY) {\n+          throw new Error(\"API Key de Gemini no configurada correctamente.\");\n+        }\n+        genAiRef.current = new GoogleGenerativeAI(API_KEY);\n+      }\n+      if (!modelRef.current) {\n+        modelRef.current = genAiRef.current.getGenerativeModel({\n+          model: MODEL_NAME,\n+          generationConfig: generationConfig,\n+        });\n+      }\n+\n+      // Construir el prompt completo con el prefijo del contexto\n+      const fullPrompt = PROMPT_PREFIX + text;\n+      console.log(\"Enviando a Gemini:\", fullPrompt);\n+\n+      // Llamar a la API usando streaming\n+      const result = await modelRef.current.generateContentStream(fullPrompt);\n+\n+      // Procesar el stream de respuesta\n+      let responseText = '';\n+      for await (const chunk of result.stream) {\n+        const chunkText = chunk.text() || '';\n+        responseText += chunkText;\n+        setGeminiResponse(prev => prev + chunkText);\n+      }\n+\n+      console.log(\"Respuesta de Gemini finalizada.\");\n+\n+    } catch (e) {\n+      console.error(\"Error llamando a la API de Gemini:\", e);\n+      setGeminiError(`Error de Gemini: ${e.message || 'Desconocido'}. Verifica tu API key y la consola.`);\n+      setGeminiResponse('');\n+    } finally {\n+      setIsLoadingGemini(false);\n+      isGeminiCallingRef.current = false;\n+    }\n   };\n \n-  // 4. Exporta el componente\n-  export default MiComponenteBasico;\n+  return (\n+    <div className=\"app-container\">\n+      <SideBar />\n+      <main className=\"content\">\n+        <Navbar />\n+\n+        <h1>Centro de ayuda de programación</h1>\n+        <p>Haz preguntas sobre programación web y nuestro asistente te ayudará.</p>\n+\n+        {/* Componente de reconocimiento de voz con props para la comunicación */}\n+        <VoiceRecognition \n+          onTextRecognized={sendToGemini}\n+          responseData={geminiResponse}\n+          isLoadingResponse={isLoadingGemini}\n+          responseError={geminiError}\n+        />\n+\n+        {/* ADVERTENCIA DE SEGURIDAD EN EL FRONTEND */}\n+        <div style={{ color: '#e65100', backgroundColor: '#fff3e0', borderColor: '#ffcc80', padding: '15px', border: '1px solid', borderRadius: '8px', margin: '20px', fontSize: '0.9em' }}>\n+          <p style={{ fontWeight: 'bold' }}>⚠️ ADVERTENCIA DE SEGURIDAD (Solo Desarrollo):</p>\n+          <p>La clave de API de Gemini está en el código frontend. Esto NO es seguro para producción.</p>\n+          <p>Para producción, envía el texto reconocido a un <strong>backend</strong> seguro que realice la llamada a la API de Gemini con tu clave.</p>\n+        </div>\n+      </main>\n+    </div>\n+  );\n+};\n+\n+export default MiComponenteBasico;\n\\ No newline at end of file\n"
                }
            ],
            "date": 1746061173230,
            "name": "Commit-0",
            "content": "// 1. Importa React\nimport React from 'react';\n\n// 2. Define el componente como una función\n//    (El nombre de la función debe empezar con mayúscula)\nconst MiComponenteBasico = () => {\n  // 3. La función devuelve JSX (código que parece HTML)\n  return (\n    <div>\n      <h1>Hola desde mi componente básico!</h1>\n      <p>Este es un párrafo simple.</p>\n    </div>\n  );\n};\n\n// 4. Exporta el componente para poder usarlo en otras partes de tu aplicación\nexport default MiComponenteBasico;"
        }
    ]
}