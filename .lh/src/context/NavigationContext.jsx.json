{
    "sourceFile": "src/context/NavigationContext.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746989686684,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746989686684,
            "name": "Commit-0",
            "content": "// src/context/NavigationContext.jsx\nimport React, { createContext, useState, useContext, useCallback, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from './AuthContext'; // Ajusta ruta si es diferente\n\nconst NavigationMicContext = createContext(null);\n\nexport const useNavigationContext = () => {\n  const context = useContext(NavigationMicContext);\n  if (!context) {\n    throw new Error('useNavigationContext debe ser usado dentro de un NavigationProvider');\n  }\n  return context;\n};\n\nexport const NavigationProvider = ({ children }) => {\n  const [isNavMicListening, setIsNavMicListening] = useState(false);\n  const [navStatusMessage, setNavStatusMessage] = useState('Navegación por voz lista (Espacio).');\n  const [lastNavCommand, setLastNavCommand] = useState(null);\n\n  const navigate = useNavigate();\n  const { logout } = useAuth();\n\n  const startNavListening = useCallback(() => {\n    console.log(\"NavigationContext: startNavListening\");\n    setIsNavMicListening(true);\n  }, []);\n\n  const stopNavListening = useCallback(() => {\n    console.log(\"NavigationContext: stopNavListening\");\n    setIsNavMicListening(false);\n  }, []);\n\n  const processNavCommand = useCallback((command) => {\n    const lowerCommand = command?.toLowerCase().trim() || '';\n    setLastNavCommand(lowerCommand);\n    setIsNavMicListening(false); // Asumir que para de escuchar al procesar\n\n    console.log(\"[NavigationContext] Procesando Comando de Navegación:\", lowerCommand);\n\n    if (!lowerCommand) {\n        setNavStatusMessage(\"No se recibió comando para navegar.\");\n        return;\n    }\n\n    if (lowerCommand.includes('lógica') || lowerCommand.includes('lógico')) {\n      setNavStatusMessage(\"Navegando a Lógica...\"); navigate('/logica');\n    } else if (lowerCommand.includes('home') || lowerCommand.includes('inicio') || lowerCommand.includes('casa')) {\n      setNavStatusMessage(\"Navegando a Inicio...\"); navigate('/home');\n    } else if (lowerCommand.includes('calendario')) {\n       setNavStatusMessage(\"Navegando a Calendario...\"); navigate('/calendar');\n    } else if (lowerCommand.includes('proyectos')) {\n        setNavStatusMessage(\"Navegando a Proyectos...\"); navigate('/projects');\n    } else if (lowerCommand.includes('ajustes') || lowerCommand.includes('configuración')) {\n        setNavStatusMessage(\"Navegando a Ajustes...\"); navigate('/settings');\n    } else if (lowerCommand.includes('ayuda')) {\n        setNavStatusMessage(\"Navegando a Ayuda...\"); navigate('/help');\n    } else if (lowerCommand.includes('contacto')) {\n         setNavStatusMessage(\"Navegando a Contacto...\"); navigate('/contact');\n    } else if (lowerCommand.includes('acerca')) {\n          setNavStatusMessage(\"Navegando a Acerca de...\"); navigate('/acerca');\n    } else if (lowerCommand.includes('salir') || lowerCommand.includes('cerrar sesión')) {\n      setNavStatusMessage(\"Cerrando sesión...\");\n      if (typeof logout === 'function') { logout(); }\n      else { console.error(\"NavigationContext: logout no disponible.\"); setNavStatusMessage(\"Error al cerrar sesión.\"); }\n    } else {\n      console.log(\"Comando de navegación no reconocido:\", lowerCommand);\n      setNavStatusMessage(`Comando \"${lowerCommand}\" no reconocido.`);\n      const timer = setTimeout(() => setNavStatusMessage('Navegación por voz lista (Espacio).'), 3000);\n      // Considerar limpiar timer si otro comando llega antes\n    }\n  }, [navigate, logout]);\n\n  const value = {\n    isNavMicListening, navStatusMessage, lastNavCommand,\n    startNavListening, stopNavListening, processNavCommand\n  };\n\n  return (\n    <NavigationMicContext.Provider value={value}>\n      {children}\n    </NavigationMicContext.Provider>\n  );\n};"
        }
    ]
}