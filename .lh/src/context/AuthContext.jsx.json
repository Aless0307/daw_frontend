{
    "sourceFile": "src/context/AuthContext.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746114788630,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746114788630,
            "name": "Commit-0",
            "content": "import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { checkAuth, login as authLogin, logout as authLogout } from '../utils/auth';\n\n// Función para logging\nconst logAuth = (message, data = null) => {\n    const timestamp = new Date().toISOString();\n    if (data) {\n        console.log(`[${timestamp}] AUTH: ${message}`, data);\n    } else {\n        console.log(`[${timestamp}] AUTH: ${message}`);\n    }\n};\n\nconst AuthContext = createContext(null);\n\nexport const useAuth = () => {\n    const context = useContext(AuthContext);\n    if (!context) {\n        console.error('[AUTH] Error: useAuth debe ser usado dentro de un AuthProvider');\n        throw new Error('useAuth debe ser usado dentro de un AuthProvider');\n    }\n    return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n    const [user, setUser] = useState(null);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        const initializeAuth = async () => {\n            logAuth('Inicializando autenticación');\n            try {\n                const userData = localStorage.getItem('user');\n                const token = localStorage.getItem('token');\n                \n                logAuth('Datos de autenticación encontrados', { \n                    hasUserData: !!userData, \n                    hasToken: !!token \n                });\n                \n                if (userData && token && checkAuth()) {\n                    const parsedUser = JSON.parse(userData);\n                    logAuth('Usuario autenticado encontrado', { \n                        username: parsedUser.username,\n                        email: parsedUser.email\n                    });\n                    setUser(parsedUser);\n                } else {\n                    logAuth('No se encontraron datos de autenticación válidos, limpiando almacenamiento');\n                    // Si no hay datos válidos, limpiar todo\n                    localStorage.removeItem('user');\n                    localStorage.removeItem('token');\n                    setUser(null);\n                }\n            } catch (error) {\n                console.error('[AUTH] Error al inicializar la autenticación:', error);\n                setUser(null);\n            } finally {\n                setLoading(false);\n                logAuth('Inicialización de autenticación completada', { loading: false });\n            }\n        };\n\n        initializeAuth();\n    }, []);\n\n    const login = (userData) => {\n        logAuth('Iniciando proceso de login', { \n            username: userData.username,\n            email: userData.email\n        });\n        \n        try {\n\n            sessionStorage.setItem('user', JSON.stringify({\n                username: userData.username,\n                email: userData.email\n            }));\n            \n            // Guardar token\n            sessionStorage.setItem('sijala', true)\n            sessionStorage.setItem('username', userData.username)\n            sessionStorage.setItem('email', userData.email)\n            \n            logAuth('Login exitoso', { \n                username: userData.username,\n                email: userData.email\n            });\n            \n            setUser({\n                username: userData.username,\n                email: userData.email\n            });\n            \n            return true;\n        } catch (error) {\n            console.error('[AUTH] Error durante el login:', error);\n            logAuth('Error durante el login', { error: error.message });\n            return false;\n        }\n    };\n\n    const logout = () => {\n        logAuth('Iniciando proceso de logout');\n        try {\n            // Limpiar datos de autenticación\n            localStorage.removeItem('token');\n            localStorage.removeItem('user');\n            setUser(null);\n            logAuth('Logout exitoso');\n            localStorage.clear();\n            sessionStorage.clear();\n        } catch (error) {\n            console.error('[AUTH] Error durante el logout:', error);\n            logAuth('Error durante el logout', { error: error.message });\n        }\n    };\n\n    const value = {\n        user,\n        loading,\n        login,\n        logout\n    };\n\n    return (\n        <AuthContext.Provider value={value}>\n            {children}\n        </AuthContext.Provider>\n    );\n}; "
        }
    ]
}